;; Object ecb-2.32/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "ecb-2.32/"
  :tables (list 
   (semanticdb-table "ecb.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [5599 5620]) ("ecb-upgrade" include nil nil [5743 5765]) ("ecb-util" include nil nil [5766 5785]) ("ecb-semantic-load-ok" variable (:constant-flag t :default-value (ignore-errors (require (quote semantic)))) nil [6117 6184]) ("ecb-eieio-load-ok" variable (:constant-flag t :default-value (ignore-errors (require (quote eieio)))) nil [6185 6246]) ("ecb-speedbar-load-ok" variable (:constant-flag t :default-value (ignore-errors (require (quote speedbar)))) nil [6247 6314]) ("ecb-compiled-in-semantic-version" variable (:constant-flag t :default-value (eval-when-compile (ignore-errors semantic-version))) nil [6316 6562]) ("let*" code nil nil [6564 7322]) ("message" code nil nil [7512 7932]) ("tree-buffer" include nil nil [7955 7977]) ("ecb-file-browser" include nil nil [7978 8005]) ("ecb-method-browser" include nil nil [8006 8035]) ("ecb-jde" include nil nil [8036 8054]) ("ecb-layout" include nil nil [8055 8076]) ("ecb-create-layout" include nil nil [8077 8105]) ("ecb-mode-line" include nil nil [8106 8130]) ("ecb-help" include nil nil [8131 8150]) ("ecb-navigate" include nil nil [8151 8174]) ("ecb-eshell" include nil nil [8175 8196]) ("ecb-compilation" include nil nil [8197 8223]) ("ecb-cycle" include nil nil [8224 8244]) ("ecb-face" include nil nil [8245 8264]) ("ecb-tod" include nil nil [8265 8283]) ("ecb-speedbar" include nil nil [8284 8307]) ("ecb-autogen" include nil nil [8308 8330]) ("ecb-winman-support" include nil nil [8331 8360]) ("ecb-compatibility" include nil nil [8361 8389]) ("ecb-analyse" include nil nil [8402 8424]) ("ecb-symboldef" include nil nil [8425 8449]) ("assoc" include nil (dependency-file "c:/tools/emacs-22/lisp/emacs-lisp/assoc.el") [8468 8484]) ("cl" include nil (dependency-file "c:/tools/emacs-22/lisp/emacs-lisp/cl.el") [8536 8549]) ("silentcomp-defun" code nil nil [8563 8597]) ("silentcomp-defvar" code nil nil [8598 8630]) ("silentcomp-defvar" code nil nil [8631 8682]) ("silentcomp-defun" code nil nil [8692 8733]) ("silentcomp-defun" code nil nil [8734 8775]) ("silentcomp-defvar" code nil nil [8777 8812]) ("silentcomp-defvar" code nil nil [8813 8848]) ("silentcomp-defun" code nil nil [8849 8882]) ("silentcomp-defun" code nil nil [8883 8913]) ("silentcomp-defun" code nil nil [8914 8949]) ("silentcomp-defun" code nil nil [8950 8987]) ("silentcomp-defvar" code nil nil [8988 9023]) ("silentcomp-defun" code nil nil [9024 9057]) ("silentcomp-defun" code nil nil [9059 9101]) ("silentcomp-defvar" code nil nil [9102 9146]) ("ecb-major-mode-selected-source" variable nil nil [9272 9360]) ("ecb-item-in-tree-buffer-selected" variable nil nil [9362 9489]) ("ecb-initialize-all-internals" function (:arguments ("&optional" "no-caches")) nil [9491 9750]) ("ecb-minor-mode" variable nil nil [9803 9931]) ("ecb-activated-window-configuration" variable nil nil [9933 10038]) ("defgroup" code nil nil [10168 10243]) ("defgroup" code nil nil [10245 10351]) ("defgroup" code nil nil [10353 10473]) ("ecb-use-recursive-edit" variable (:user-visible-flag t) nil [10475 10660]) ("ecb-auto-activate" variable (:user-visible-flag t) nil [10662 10883]) ("ecb-activation-selects-ecb-frame-if-already-active" variable (:user-visible-flag t :default-value (quote ask)) nil [10885 11423]) ("ecb-major-modes-show-or-hide" variable (:user-visible-flag t :default-value (cons nil nil)) nil [11425 12166]) ("ecb-clear-caches-before-activate" variable (:user-visible-flag t) nil [12169 12876]) ("ecb-grep-function" variable (:user-visible-flag t :default-value (if (fboundp (quote igrep)) (quote igrep) (quote grep))) nil [12878 14086]) ("ecb-grep-find-function" variable (:user-visible-flag t :default-value (if (fboundp (quote igrep-find)) (quote igrep-find) (quote grep-find))) nil [14088 14413]) ("ecb-window-sync" variable (:user-visible-flag t :default-value (quote (Info-mode dired-mode))) nil [14416 15842]) ("ecb-window-sync-delay" variable (:user-visible-flag t :default-value 0.25) nil [15844 16723]) ("ecb-stealthy-tasks-delay" variable (:user-visible-flag t :default-value 1) nil [16725 17998]) ("ecb-minor-mode-text" variable (:user-visible-flag t :default-value " ECB") nil [18022 18407]) ("ecb-auto-compatibility-check" variable (:user-visible-flag t :default-value t) nil [18409 19224]) ("ecb-version-check" variable (:user-visible-flag t :default-value t) nil [19226 19534]) ("ecb-debug-mode" variable (:user-visible-flag t) nil [19536 20107]) ("ecb-run-ediff-in-ecb-frame" variable (:user-visible-flag t :default-value t) nil [20109 20630]) ("ecb-activate-before-layout-draw-hook" variable (:user-visible-flag t) nil [20633 21855]) ("ecb-before-activate-hook" variable (:user-visible-flag t) nil [21858 22424]) ("ecb-activate-hook" variable (:user-visible-flag t) nil [22427 22770]) ("ecb-deactivate-hook" variable (:user-visible-flag t) nil [22772 22959]) ("ecb-before-deactivate-hook" variable (:user-visible-flag t) nil [22961 23298]) ("ecb-current-buffer-sync-hook" variable (:user-visible-flag t) nil [23300 24479]) ("ecb-current-buffer-sync-hook-internal" variable nil nil [24605 24709]) ("ecb-kill-buffer-hook" function nil nil [24711 26498]) ("ecb-current-buffer-sync" function (:arguments ("&optional" "force")) nil [26500 32247]) ("ecb-window-sync-function" function nil nil [32250 32723]) ("ecb-window-sync" function (:user-visible-flag t) nil [32729 33319]) ("ecb-window-sync-old" variable (:default-value (quote (Info-mode dired-mode))) nil [33321 33373]) ("ecb-toggle-window-sync" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [33374 34580]) ("ecb-customize" function (:user-visible-flag t) nil [34583 34737]) ("ecb-customize-most-important" function (:user-visible-flag t) nil [34739 34929]) ("ecb-debug-autocontrol-functions" variable nil nil [34931 34975]) ("ecb-debug-autocontrol-fcn-error" function (:arguments ("autocontrol-fcn" "&rest" "args")) nil [35257 35667]) ("ecb-idle-timer-alist" variable nil nil [35669 35702]) ("ecb-post-command-hooks" variable nil nil [35703 35738]) ("ecb-pre-command-hooks" variable nil nil [35739 35773]) ("ecb-activate-ecb-autocontrol-functions" function (:arguments ("idle-value" "func")) nil [35774 37025]) ("ecb-monitor-autocontrol-functions" function nil nil [37027 37701]) ("ecb-menu-item" function (:arguments ("item")) nil [37863 38359]) ("ecb-menu-name" variable (:default-value "ECB") nil [38361 38389]) ("ecb-menu-bar" variable (:default-value (list ecb-menu-name (ecb-menu-item ["Select ECB frame" ecb-select-ecb-frame :active (and ecb-minor-mode (not (equal (selected-frame) ecb-frame))) :help "Select the ECB-frame."]) (ecb-menu-item ["Synchronize ECB windows" (ecb-window-sync) :active (and (equal (selected-frame) ecb-frame) (ecb-point-in-edit-window)) :help "Synchronize the ECB windows with the current edit-window."]) (ecb-menu-item ["Update directories buffer" ecb-update-directories-buffer :active (equal (selected-frame) ecb-frame) :help "Updates the directories buffer with current disk-state"]) (ecb-menu-item ["Add all buffers to history" ecb-add-all-buffers-to-history :active (and (equal (selected-frame) ecb-frame) (ecb-window-live-p ecb-history-buffer-name)) :help "Add all current file-buffers to history"]) "-" (ecb-menu-item ["Rebuild methods buffer" ecb-rebuild-methods-buffer :active (equal (selected-frame) ecb-frame) :help "Rebuild the methods buffer completely"]) (ecb-menu-item ["Expand methods buffer" ecb-expand-methods-nodes :active (equal (selected-frame) ecb-frame) :help "Expand all nodes of a certain indent-level"]) (ecb-menu-item ["Toggle auto. expanding of the method buffer" ecb-toggle-auto-expand-tag-tree :active (equal (selected-frame) ecb-frame) :help "Toggle auto. expanding of the method buffer"]) "-" (ecb-menu-item ["Change layout" ecb-change-layout :active (equal (selected-frame) ecb-frame) :help "Change the layout."]) (ecb-menu-item ["Redraw layout" ecb-redraw-layout :active (equal (selected-frame) ecb-frame) :help "Redraw the current layout."]) (ecb-menu-item ["Toggle layout" ecb-toggle-layout :active (and (equal (selected-frame) ecb-frame) (> (length ecb-toggle-layout-sequence) 1)) :help "Toggle between several layouts"]) (ecb-menu-item ["Toggle visibility of ECB windows" ecb-toggle-ecb-windows :active (equal (selected-frame) ecb-frame) :help "Toggle the visibility of all ECB windows."]) (list "Layout administration" (ecb-menu-item ["Store current window-sizes" ecb-store-window-sizes :active (equal (selected-frame) ecb-frame) :help "Store current sizes of the ecb-windows in current layout."]) (ecb-menu-item ["Restore sizes of the ecb-windows" ecb-restore-window-sizes :active (equal (selected-frame) ecb-frame) :help "Restore the sizes of the ecb-windows in current layout."]) (ecb-menu-item ["Restore default-sizes of the ecb-windows" ecb-restore-default-window-sizes :active (equal (selected-frame) ecb-frame) :help "Restore the default-sizes of the ecb-windows in current layout."]) "-" (ecb-menu-item ["Create new layout" ecb-create-new-layout :active (equal (selected-frame) ecb-frame) :help "Create a new ECB-layout."]) (ecb-menu-item ["Delete new layout" ecb-delete-new-layout :active (equal (selected-frame) ecb-frame) :help "Delete an user-created ECB-layout."]) "-" (ecb-menu-item ["Show help for a layout" ecb-show-layout-help :active t :help "Show the documentation for a layout."])) "-" (ecb-menu-item ["Toggle compile window" ecb-toggle-compile-window :active (equal (selected-frame) ecb-frame) :help "Toggle visibility of compile window."]) (ecb-menu-item ["Toggle enlarged compile window" ecb-toggle-compile-window-height :active (and (equal (selected-frame) ecb-frame) ecb-compile-window (ecb-compile-window-live-p)) :help "Toggle enlarged compile window."]) "-" (list "Navigate" (ecb-menu-item ["Previous (back)" ecb-nav-goto-previous :active t :help "Go to the previous navigation point"]) (ecb-menu-item ["Next (forward)" ecb-nav-goto-next :active t :help "Go to the next navigation point"])) (list "Goto window" (ecb-menu-item ["Last selected edit-window" ecb-goto-window-edit-last :active t :help "Go to the last selected edit-window"]) (ecb-menu-item ["Edit-window 1" ecb-goto-window-edit1 :active t :help "Go to the first edit-window"]) (ecb-menu-item ["Edit-window 2" ecb-goto-window-edit2 :active (ecb-edit-window-splitted) :help "Go to the second edit-window (if splitted)"]) (ecb-menu-item ["Directories" ecb-goto-window-directories :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-directories-buffer-name) :help "Go to the directories window"]) (ecb-menu-item ["Sources" ecb-goto-window-sources :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-sources-buffer-name) :help "Go to the sources window"]) (ecb-menu-item ["Methods and Variables" ecb-goto-window-methods :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-methods-buffer-name) :help "Go to the methods/variables window"]) (ecb-menu-item ["History" ecb-goto-window-history :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-history-buffer-name) :help "Go to the history window"]) (ecb-menu-item ["Analyse" ecb-goto-window-analyse :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-analyse-buffer-name) :help "Go to the analyse window"]) (ecb-menu-item ["Speedbar" ecb-goto-window-speedbar :active (and ecb-use-speedbar-instead-native-tree-buffer (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-speedbar-buffer-name)) :help "Go to the integrated speedbar window"]) (ecb-menu-item ["Compilation" ecb-goto-window-compilation :active (equal (quote visible) (ecb-compile-window-state)) :help "Go to the history window"])) (list "Display window maximized" (ecb-menu-item ["Directories" ecb-maximize-window-directories :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-directories-buffer-name) :help "Maximize the directories window - even if currently not visible"]) (ecb-menu-item ["Sources" ecb-maximize-window-sources :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-sources-buffer-name) :help "Maximize the sources window - even if currently not visible"]) (ecb-menu-item ["Methods and Variables" ecb-maximize-window-methods :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-methods-buffer-name) :help "Maximize the methods/variables window - even if currently not visible"]) (ecb-menu-item ["History" ecb-maximize-window-history :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-history-buffer-name) :help "Maximize the history window - even if currently not visible"]) (ecb-menu-item ["Analyse" ecb-maximize-window-analyse :active (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-analyse-buffer-name) :help "Maximize the analyse window - even if currently not visible"]) (ecb-menu-item ["Speedbar" ecb-maximize-window-speedbar :active (and ecb-use-speedbar-instead-native-tree-buffer (ecb-buffer-is-ecb-buffer-of-current-layout-p ecb-speedbar-buffer-name)) :help "Maximize the integrated speedbar window - even if not visible"])) "-" (list "Preferences" (ecb-menu-item ["Most important..." (customize-group "ecb-most-important") :active t :help "Customize the most important options"]) (ecb-menu-item ["All..." (ecb-customize) :active t :help "Display all available option-groups..."]) "-" (ecb-menu-item ["General..." (customize-group "ecb-general") :active t :help "Customize general ECB options"]) (ecb-menu-item ["Directories..." (customize-group "ecb-directories") :active t :help "Customize ECB directories"]) (ecb-menu-item ["Sources..." (customize-group "ecb-sources") :active t :help "Customize ECB sources"]) (ecb-menu-item ["Methods..." (customize-group "ecb-methods") :active t :help "Customize ECB method display"]) (ecb-menu-item ["History..." (customize-group "ecb-history") :active t :help "Customize ECB history"]) (ecb-menu-item ["Analyse..." (customize-group "ecb-analyse") :active t :help "Customize ECB analyse ingeractor"]) (ecb-menu-item ["Version control..." (customize-group "ecb-version-control") :active t :help "Customize the version-control-support"]) (ecb-menu-item ["Layout..." (customize-group "ecb-layout") :active t :help "Customize ECB layout"]) (ecb-menu-item ["Tree-buffer style and handling..." (customize-group "ecb-tree-buffer") :active t :help "Customize the tree-buffers of ECB"]) (ecb-menu-item ["Face options..." (customize-group "ecb-face-options") :active t :help "Customize ECB faces"]) (ecb-menu-item ["Download options..." (customize-group "ecb-download") :active t :help "Customize options for downloading ECB"]) (ecb-menu-item ["Help options..." (customize-group "ecb-help") :active t :help "Customize options for the online help of ECB"]) (ecb-menu-item ["ECB/eshell options..." (customize-group "ecb-eshell") :active t :help "Customize options for the eshell integration of ECB"]) (ecb-menu-item ["Supporting non-semantic-sources..." (customize-group "ecb-non-semantic") :active t :help "Customize options for parsing non-semantic-sources"]) (ecb-menu-item ["Supporting window-managers..." (customize-group "ecb-winman-support") :active t :help "Customize options for the window-manager-support"])) (list "Upgrade and Download" (ecb-menu-item ["Upgrade ECB-options to current ECB-version" ecb-upgrade-options :active (equal (selected-frame) ecb-frame) :help "Try to upgrade ECB-options to current ECB-version if necessary."]) "-" (ecb-menu-item ["Download new ECB version" ecb-download-ecb :active (equal (selected-frame) ecb-frame) :help "Download a new ECB-version from the ECB-website."]) (ecb-menu-item ["Download new semantic version" ecb-download-semantic :active (equal (selected-frame) ecb-frame) :help "Download a new semantic version from the semantic-website."])) (list "Help" (ecb-menu-item ["Show Online Help" ecb-show-help :active t :help "Show the online help of ECB."]) (ecb-menu-item ["ECB NEWS" (ecb-display-news-for-upgrade t) :active t :help "Displays the NEWS-file of ECB."]) (ecb-menu-item ["List of most important options" (let ((ecb-show-help-format (quote info))) (ecb-show-help) (Info-goto-node "Most important options")) :active t :help "Displays a a list of options which you should know."]) (ecb-menu-item ["List of all options" (let ((ecb-show-help-format (quote info))) (ecb-show-help) (Info-goto-node "Option Index")) :active t :help "Displays an index of all user-options in the online-help."]) (ecb-menu-item ["List of all commands" (let ((ecb-show-help-format (quote info))) (ecb-show-help) (Info-goto-node "Command Index")) :active t :help "Displays an index of all commands in the online-help."]) (ecb-menu-item ["FAQ" (let ((ecb-show-help-format (quote info))) (ecb-show-help) (Info-goto-node "FAQ")) :active t :help "Show the FAQ of ECB."]) (ecb-menu-item ["Conflicts with other packages" (let ((ecb-show-help-format (quote info))) (ecb-show-help) (Info-goto-node "Conflicts and bugs")) :active t :help "What to do for conflicts with other packages."]) (ecb-menu-item ["Submit problem report" ecb-submit-problem-report :active t :help "Submit a problem report to the ECB mailing list."]) (ecb-menu-item ["ECB Debug mode" (setq ecb-debug-mode (not ecb-debug-mode)) :active t :style toggle :selected ecb-debug-mode :help "Print debug-informations about parsing files in the message buffer."]) (ecb-menu-item ["ECB Layout Debug mode" (setq ecb-layout-debug-mode (not ecb-layout-debug-mode)) :active t :style toggle :selected ecb-layout-debug-mode :help "Print debug-informations about window-operations in the message buffer."]) "-" (ecb-menu-item ["Help preferences..." (customize-group "ecb-help") :active t :help "Customize options for the online help of ECB"]) "-" (concat "ECB " ecb-version)) "-" (ecb-menu-item ["Deactivate ECB" ecb-deactivate :active t :help "Deactivate ECB."]))) nil [38390 52488]) ("ecb-add-to-minor-modes" function nil nil [52490 53419]) ("ecb-mode-map" variable nil nil [53421 53487]) ("ecb-key-map" variable (:user-visible-flag t :default-value (quote ("C-c ." (t "fh" ecb-history-filter) (t "fs" ecb-sources-filter) (t "fm" ecb-methods-filter) (t "fr" ecb-methods-filter-regexp) (t "ft" ecb-methods-filter-tagclass) (t "fc" ecb-methods-filter-current-type) (t "fp" ecb-methods-filter-protection) (t "fn" ecb-methods-filter-nofilter) (t "fl" ecb-methods-filter-delete-last) (t "ff" ecb-methods-filter-function) (t "p" ecb-nav-goto-previous) (t "n" ecb-nav-goto-next) (t "lc" ecb-change-layout) (t "lr" ecb-redraw-layout) (t "lw" ecb-toggle-ecb-windows) (t "lt" ecb-toggle-layout) (t "s" ecb-window-sync) (t "r" ecb-rebuild-methods-buffer) (t "a" ecb-toggle-auto-expand-tag-tree) (t "x" ecb-expand-methods-nodes) (t "h" ecb-show-help) (t "gl" ecb-goto-window-edit-last) (t "g1" ecb-goto-window-edit1) (t "g2" ecb-goto-window-edit2) (t "gc" ecb-goto-window-compilation) (t "gd" ecb-goto-window-directories) (t "gs" ecb-goto-window-sources) (t "gm" ecb-goto-window-methods) (t "gh" ecb-goto-window-history) (t "ga" ecb-goto-window-analyse) (t "gb" ecb-goto-window-speedbar) (t "md" ecb-maximize-window-directories) (t "ms" ecb-maximize-window-sources) (t "mm" ecb-maximize-window-methods) (t "mh" ecb-maximize-window-history) (t "ma" ecb-maximize-window-analyse) (t "mb" ecb-maximize-window-speedbar) (t "e" eshell) (t "o" ecb-toggle-scroll-other-window-scrolls-compile) (t "\\" ecb-toggle-compile-window) (t "/" ecb-toggle-compile-window-height) (t "," ecb-cycle-maximized-ecb-buffers) (t "." ecb-cycle-through-compilation-buffers)))) nil [53489 59853]) ("ecb-activate" function (:user-visible-flag t) nil [59870 60185]) ("ecb-activate-internal" function nil nil [60187 60718]) ("ecb-upgrade-check-done" variable nil nil [60721 60756]) ("ecb-clean-up-after-activation-failure" function (:arguments ("msg" "err")) nil [60758 61145]) ("ecb-last-window-config-before-deactivation" variable nil nil [61147 61327]) ("ecb-temporary-changed-emacs-variables-alist" variable nil nil [61329 61563]) ("ecb-modify-emacs-variable" function (:arguments ("var" "action" "&optional" "new-value")) nil [61565 62641]) ("ecb-check-semantic-load" function nil nil [62643 66356]) ("ecb-activate--impl" function nil nil [66359 81188]) ("ecb-ediff-quit-hook" function nil nil [81414 81967]) ("ecb-before-ediff-window-config" variable nil nil [81969 82012]) ("ecb-ediff-before-setup-hook" function nil nil [82244 82850]) ("ecb-deactivate" function (:user-visible-flag t) nil [82852 82977]) ("ecb-deactivate-internal" function (:arguments ("&optional" "run-no-hooks")) nil [82979 91004]) ("ecb-minor-mode" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [91021 91550]) ("ecb-compile-file-if-necessary" function (:arguments ("file" "&optional" "force")) nil [91578 91989]) ("ecb-byte-compile" function (:user-visible-flag t :arguments ("&optional" "force-all")) nil [92006 93327]) ("ecb-auto-activate-hook" function nil nil [93329 93467]) ("ecb-last-major-mode" variable nil nil [93469 93501]) ("ecb-handle-major-mode-visibilty" function nil nil [93503 96449]) ("add-hook" code nil nil [96456 96518]) ("add-hook" code nil nil [96520 96574]) ("silentcomp-defvar" code nil nil [96576 96615]) ("condition-case" code nil nil [96616 97257]) ("eval-after-load" code nil nil [97338 99204]) ("condition-case" code nil nil [99243 103822]) ("ecb-disable-advices" code nil nil [104092 104141]) ("ecb-disable-advices" code nil nil [104142 104194]) ("ecb-disable-advices" code nil nil [104195 104245]) ("ecb-disable-advices" code nil nil [104246 104299]) ("ecb-disable-advices" code nil nil [104300 104336]) ("ecb-activate-adviced-functions" code nil nil [104337 104373]) ("ecb-enable-ecb-advice" code nil nil [104374 104422]) ("ecb-enable-ecb-advice" code nil nil [104423 104471]) ("ecb-file-browser-initialize" code nil nil [104523 104552]) ("ecb-method-browser-initialize" code nil nil [104553 104584]) ("silentcomp-provide" code nil nil [104586 104611]))
    :file "ecb.el"
    :pointmax 104634
    :unmatched-syntax 'nil
    )
   (semanticdb-table "silentcomp.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp-unbound-variables" variable nil nil [4364 4405]) ("silentcomp-original-functions" variable nil nil [4406 4448]) ("silentcomp-environment-set" variable nil nil [4449 4488]) ("silentcomp-restore-environment" function nil nil [4490 5299]) ("silentcomp-is-compiling" function nil nil [5301 5506]) ("silentcomp-defvar" function (:arguments ("var")) nil [5508 6064]) ("silentcomp-defun" function (:arguments ("fun")) nil [6066 7022]) ("silentcomp-provide" function (:arguments ("feature")) nil [7024 7289]) ("silentcomp" package nil nil [7291 7312]))
    :file "silentcomp.el"
    :pointmax 7342
    )
   (semanticdb-table "ecb-upgrade.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [7723 7744]) ("ecb-version" variable (:constant-flag t :default-value "2.32") nil [7841 7895]) ("cl" include nil nil [7918 7931]) ("ecb-util" include nil nil [7934 7953]) ("silentcomp-defun" code nil nil [7955 7988]) ("silentcomp-defun" code nil nil [7989 8047]) ("ecb-upgrade-news" variable (:constant-flag t :default-value (quote (("2.32" "New tree-interactor for the semantic-analyser." "New interactor for displaying definition for current symbol at point." "Up- and down-arrow are now also smart in the tree-buffers." "Much better maximizing/minimizing of the ecb-tree-windows." "New option `ecb-maximize-next-after-maximized-select'." "`ecb-truncate-lines' has been renamed to `ecb-tree-truncate-lines'") ("2.30" "Support for displaying the VC-state in the tree-buffers; see NEWS." "ECB is now capable of handling remote paths (e.g. TRAMP-paths)" "Precisely expanding of current node via popup-menu of the methods-buffer." "Time consuming tasks are performed stealthy; see `ecb-stealthy-tasks-delay'") ("2.27" "Much saver resizing-mechanism for permanent compile-window. See NEWS.") ("2.26" "Some regexp-options has been changed to regexp-list-options. See NEWS." "New option `ecb-history-exclude-file-regexps'." "`ecb-expand-methods-nodes' works for non-semantic-buffers too." "Readonly-sourcefiles are display in a different face.") ("2.25" "`ecb-sort-history-items' has been renamed to `ecb-history-sort-method'" "New options `ecb-sources-sort-ignore-case' and `ecb-history-sort-ignore-case'" "New icons for parent-display in the Methods-buffer") ("2.24" "New \"current-type\"-filter for the Methods-buffer" "Now directories are prescanned for emptyness") ("2.23" "New cedet1.0beta2 is supported." "Distinction between functions and function-prototypes in the Methods-buffer" "The command `ecb-toggle-layout' now has a prefix-argument" "Default tag-filters for certain files which are applied automatically" "Double-clicking the mouse-1-button now works with integrated speedbar" "A new hook `ecb-speedbar-before-activate-hook'") ("2.22" "New nifty feature for filtering the tags displayed in the Methods-buffer" "Much smarter mechanism to highlight the current tag in the methods-buffer" "New option `ecb-auto-expand-tag-tree-collapse-other'." "Fixed a bug preventing the native Windows-port of XEmacs from working.") ("2.21" "Advice for `balance-windows' so only the edit-windows are balanced." "Gnus, BBDB, VM, Xrefactory etc. work even when ECB-windows are visible." "Commands using `Electric-pop-up-window' now work correctly with ECB." "Fixed some annoying bugs and one fatal bug.") ("2.20" "Fixed a bug preventing tree-buffers with expand-symbol 'before' to work" "'ecb-major-modes-(de)activate' replaced by `ecb-major-modes-show-or-hide'" "New keybinding for the online-help: [C-c . h]" "The edit-area can be splitted in more than 2 windows." "`ecb-other-window-jump-behavior' renamed in `ecb-other-window-behavior'" "New option `ecb-maximize-ecb-window-after-selection'" "popup-menus of the tree-buffers can be used with the tmm-library" "New option `ecb-change-layout-preserves-compwin-state'" "`delete-window' and `delete-other-windows' handle the compile-window" "Support of the default modeline-mechanisms for deleting other windows") ("2.11" "Using semanticdb to jump to type-tags defined in other files") ("2.01" "Support for semantic 2.0" "The tree-buffers can be displayed graphically with images" "Popup-menus of the tree-buffers support submenus" "The sources- and the history-buffer can be filtered" "Ediff runs per default in the ECB-frame") ("1.96" "ECB can work together with the window-managers escreen and winring" "Much better support of the ECB-compile-window")))) nil [8378 12466]) ("ecb-upgradable-option-alist" variable (:constant-flag t :default-value (quote ((ecb-compile-window-temporally-enlarge ecb-compile-window-temporally-enlarge ecb-upgrade-compile-window-temporally-enlarge) (ecb-window-sync ecb-window-sync ecb-upgrade-window-sync) (ecb-hide-ecb-windows-hook ecb-hide-ecb-windows-before-hook identity) (ecb-show-ecb-windows-hook ecb-show-ecb-windows-before-hook identity) (ecb-layout-nr ecb-layout-name ecb-upgrade-layout-nr) (ecb-toggle-layout-sequence ecb-toggle-layout-sequence ecb-upgrade-toggle-layout-sequence) (ecb-cache-directory-contents ecb-cache-directory-contents ecb-upgrade-cache-directory-contents) (ecb-layout-always-operate-in-edit-window ecb-layout-always-operate-in-edit-window ecb-upgrade-alway-operate-in-edit-window) (ecb-truncate-lines ecb-tree-truncate-lines ecb-upgrade-truncate-lines) (ecb-mode-line-prefixes ecb-mode-line-prefixes ecb-upgrade-mode-line-prefixes) (ecb-mode-line-data ecb-mode-line-data ecb-upgrade-mode-line-data) (ecb-use-speedbar-for-directories ecb-use-speedbar-instead-native-tree-buffer ecb-upgrade-use-speedbar-for-directories) (ecb-directories-menu-user-extension ecb-directories-menu-user-extension ecb-upgrade-directories-menu-ext) (ecb-sources-menu-user-extension ecb-sources-menu-user-extension ecb-upgrade-sources-menu-ext) (ecb-methods-menu-user-extension ecb-methods-menu-user-extension ecb-upgrade-methods-menu-ext) (ecb-history-menu-user-extension ecb-history-menu-user-extension ecb-upgrade-history-menu-ext) (ecb-bucket-token-display ecb-bucket-node-display identity) (ecb-auto-expand-token-tree ecb-auto-expand-tag-tree identity) (ecb-font-lock-tokens ecb-font-lock-tags identity) (ecb-token-jump-sets-mark ecb-tag-jump-sets-mark identity) (ecb-token-display-function ecb-tag-display-function ecb-upgrade-token-display-function) (ecb-type-token-display ecb-type-tag-display ecb-upgrade-type-token-display) (ecb-post-process-semantic-tokenlist ecb-post-process-semantic-taglist ecb-upgrade-post-process-semantic-tokenlist) (ecb-show-only-positioned-tokens ecb-show-only-positioned-tags identity) (ecb-show-tokens ecb-show-tags ecb-upgrade-show-tags) (ecb-show-tags ecb-show-tags ecb-upgrade-show-tags) (ecb-highlight-token-with-point ecb-highlight-tag-with-point identity) (ecb-highlight-token-with-point-delay ecb-highlight-tag-with-point-delay identity) (ecb-token-visit-post-actions ecb-tag-visit-post-actions ecb-upgrade-token-visit-post-actions) (ecb-token-header-face ecb-tag-header-face ecb-upgrade-token-header-face) (ecb-post-process-semantic-taglist ecb-post-process-semantic-taglist ecb-upgrade-post-process-semantic-taglist) (ecb-primary-mouse-jump-destination ecb-mouse-click-destination identity) (ecb-split-edit-window ecb-split-edit-window-after-start ecb-upgrade-split-edit-window) (ecb-sort-history-items ecb-history-sort-method ecb-upgrade-sort-history-items) (ecb-other-window-jump-behavior ecb-other-window-behavior ecb-upgrade-other-window-jump-behavior) (ecb-excluded-directories-regexp ecb-excluded-directories-regexps ecb-upgrade-excluded-directories-regexp) (ecb-source-file-regexps ecb-source-file-regexps ecb-upgrade-source-file-regexps) (ecb-exclude-parents-regexp ecb-exclude-parents-regexps ecb-upgrade-exclude-parents-regexp) (ecb-auto-expand-tag-tree-collapse-other ecb-auto-expand-tag-tree-collapse-other ecb-upgrade-auto-expand-tag-tree-collapse-other) (ecb-prescan-directories-for-emptyness ecb-prescan-directories-for-emptyness ecb-upgrade-prescan-directories-for-emptyness) (ecb-sources-perform-read-only-check ecb-sources-perform-read-only-check ecb-upgrade-sources-perform-read-only-check) (ecb-vc-enable-support ecb-vc-enable-support ecb-upgrade-vc-enable-support) (ecb-tree-image-icons-directories ecb-tree-image-icons-directories ecb-upgrade-tree-image-icons-directories) (ecb-tree-RET-selects-edit-window ecb-tree-do-not-leave-window-after-select ecb-upgrade-tree-RET-selects-edit-window)))) nil [12683 19525]) ("ecb-upgrade-compile-window-temporally-enlarge" function (:arguments ("old-val")) nil [19774 19993]) ("ecb-upgrade-window-sync" function (:arguments ("old-val")) nil [20024 20160]) ("ecb-upgrade-layout-nr2name" function (:arguments ("number")) nil [20245 21313]) ("ecb-upgrade-layout-nr" function (:arguments ("old-val")) nil [21315 21478]) ("ecb-upgrade-toggle-layout-sequence" function (:arguments ("old-val")) nil [21480 21644]) ("ecb-upgrade-use-speedbar-for-directories" function (:arguments ("old-val")) nil [21646 21730]) ("ecb-upgrade-major-modes-activate" function (:arguments ("old-val")) nil [21732 22030]) ("ecb-upgrade-cache-directory-contents" function (:arguments ("old-val")) nil [22032 22197]) ("ecb-upgrade-truncate-lines" function (:arguments ("old-val")) nil [22199 23115]) ("ecb-upgrade-alway-operate-in-edit-window" function (:arguments ("old-val")) nil [23117 23270]) ("ecb-upgrade-mode-line-prefixes" function (:arguments ("old-val")) nil [23272 23605]) ("ecb-upgrade-mode-line-data" function (:arguments ("old-val")) nil [23607 24185]) ("ecb-upgrade-menu-extension" function (:arguments ("old-list")) nil [24187 24320]) ("ecb-upgrade-directories-menu-ext" function (:arguments ("old-val")) nil [24322 24538]) ("ecb-upgrade-sources-menu-ext" function (:arguments ("old-val")) nil [24540 24748]) ("ecb-upgrade-methods-menu-ext" function (:arguments ("old-val")) nil [24750 24958]) ("ecb-upgrade-history-menu-ext" function (:arguments ("old-val")) nil [24960 25168]) ("ecb-upgrade-token-display-function" function (:arguments ("old-val")) nil [25170 27042]) ("ecb-upgrade-type-token-display" function (:arguments ("old-val")) nil [27045 27854]) ("ecb-upgrade-post-process-semantic-tokenlist" function (:arguments ("old-val")) nil [27856 28268]) ("ecb-upgrade-token-visit-post-actions" function (:arguments ("old-val")) nil [28270 29210]) ("ecb-upgrade-token-header-face" function (:arguments ("old-val")) nil [29212 29344]) ("ecb-upgrade-post-process-semantic-taglist" function (:arguments ("old-val")) nil [29346 29531]) ("ecb-upgrade-split-edit-window" function (:arguments ("old-val")) nil [29533 29642]) ("ecb-upgrade-other-window-jump-behavior" function (:arguments ("old-val")) nil [29644 29835]) ("ecb-upgrade-show-tags" function (:arguments ("old-val")) nil [29837 29956]) ("ecb-upgrade-sort-history-items" function (:arguments ("old-val")) nil [29958 30045]) ("ecb-upgrade-excluded-directories-regexp" function (:arguments ("old-val")) nil [30047 30121]) ("ecb-upgrade-source-file-regexps" function (:arguments ("old-val")) nil [30123 30300]) ("ecb-upgrade-exclude-parents-regexp" function (:arguments ("old-val")) nil [30306 30388]) ("ecb-upgrade-auto-expand-tag-tree-collapse-other" function (:arguments ("old-val")) nil [30390 30500]) ("ecb-upgrade-prescan-directories-for-emptyness" function (:arguments ("old-val")) nil [30502 30599]) ("ecb-upgrade-sources-perform-read-only-check" function (:arguments ("old-val")) nil [30601 30696]) ("ecb-upgrade-vc-enable-support" function (:arguments ("old-val")) nil [30700 30781]) ("ecb-upgrade-tree-image-icons-directories" function (:arguments ("old-val")) nil [30783 31498]) ("ecb-upgrade-tree-RET-selects-edit-window" function (:arguments ("old-val")) nil [31500 32016]) ("defgroup" code nil nil [32233 32382]) ("ecb-options-version" variable (:user-visible-flag t :default-value ecb-version) nil [32384 32540]) ("ecb-custom-file-writeable-p" function nil nil [32542 32858]) ("ecb-customize-save-variable" function (:arguments ("option" "value")) nil [32860 33334]) ("ecb-customize-set-variable" function (:arguments ("option" "value")) nil [33336 33425]) ("ecb-option-set-default" function (:arguments ("option")) nil [33427 33639]) ("ecb-option-upgrade" function (:arguments ("old-option")) nil [33641 36089]) ("ecb-option-compatible-p" function (:arguments ("option")) nil [36091 36370]) ("ecb-old-ecb-version" variable nil nil [36372 36502]) ("ecb-options-version=ecb-version-p" function nil nil [36504 36726]) ("ecb-store-current-options-version" function nil nil [36728 37030]) ("ecb-not-compatible-options" variable nil nil [37035 37364]) ("ecb-all-options" variable nil nil [37367 37395]) ("ecb-get-all-ecb-options" function nil nil [37397 37671]) ("ecb-check-not-compatible-options" function nil nil [37673 38383]) ("ecb-upgrade-not-compatible-options" function nil nil [38385 39619]) ("ecb-renamed-options" variable nil nil [39626 39658]) ("ecb-upgrade-renamed-options" function nil nil [39660 41385]) ("wid-edit" include nil nil [41387 41406]) ("silentcomp-defvar" code nil nil [41407 41447]) ("silentcomp-defvar" code nil nil [41448 41481]) ("ecb-upgrade-button-keymap" variable (:default-value (let (parent-keymap mouse-button1 keymap) (if ecb-running-xemacs (setq parent-keymap widget-button-keymap mouse-button1 [button1]) (setq parent-keymap widget-keymap mouse-button1 [down-mouse-1])) (setq keymap (copy-keymap parent-keymap)) (define-key keymap mouse-button1 (function widget-button-click)) keymap)) nil [41483 41909]) ("ecb-not-compatible-or-renamed-options-detected" function nil nil [41912 42023]) ("ecb-upgrade-make-copy-of-custom-file" function nil nil [42025 42531]) ("ecb-display-upgraded-options" function (:user-visible-flag t) nil [42540 54241]) ("ecb-display-news-for-upgrade" function (:user-visible-flag t :arguments ("&optional" "full-news")) nil [54243 55836]) ("ecb-upgrade-options" function (:user-visible-flag t) nil [55845 56328]) ("ecb-required-semantic-version-min" variable (:constant-flag t :default-value (quote (1 4 2 0))) nil [56519 56574]) ("ecb-required-semantic-version-max" variable (:constant-flag t :default-value (quote (1 4 3 9))) nil [56575 56630]) ("ecb-required-eieio-version-min" variable (:constant-flag t :default-value (quote (0 17 2 0))) nil [56631 56684]) ("ecb-required-eieio-version-max" variable (:constant-flag t :default-value (quote (0 17 3 9))) nil [56685 56738]) ("ecb-required-speedbar-version-min" variable (:constant-flag t :default-value (quote (0 14 1 1))) nil [56739 56795]) ("ecb-required-speedbar-version-max" variable (:constant-flag t :default-value (quote (0 15 3 9))) nil [56796 56852]) ("ecb-all-requirements-available" variable nil nil [57115 57158]) ("ecb-check-requirements" function (:arguments ("&optional" "just-check")) nil [57160 67647]) ("defgroup" code nil nil [67836 67965]) ("ecb-download-url" variable (:user-visible-flag t :default-value "http://ftp1.sourceforge.net/ecb/") nil [67967 68319]) ("ecb-download-package-version-type" variable (:user-visible-flag t :default-value 1) nil [68393 70030]) ("ecb-download-install-parent-dir" variable (:user-visible-flag t :default-value (or (and (file-writable-p ecb-ecb-parent-dir) ecb-ecb-parent-dir) "~")) nil [71886 72464]) ("ecb-download-delete-archive" variable (:user-visible-flag t :default-value (quote always)) nil [72466 73096]) ("ecb-cedet-url" variable (:user-visible-flag t :default-value "http://ftp1.sourceforge.net/cedet/") nil [73098 73460]) ("ecb-download-buffername" variable (:constant-flag t :default-value " *ecb-download*") nil [73462 73514]) ("ecb-wget-path" variable nil nil [73516 73542]) ("ecb-tar-path" variable nil nil [73543 73568]) ("ecb-gzip-path" variable nil nil [73569 73595]) ("ecb-wget-setup" variable (:user-visible-flag t :default-value (cons (if (fboundp (quote executable-find)) (executable-find "wget") "wget") (case system-type (cygwin32 (quote cygwin)) (windows-nt (if (getenv "CYGWIN") (quote cygwin) (quote windows))) (otherwise (quote other))))) nil [73598 74860]) ("ecb-gzip-setup" variable (:user-visible-flag t :default-value (cons (if (fboundp (quote executable-find)) (executable-find "gzip") "gzip") (case system-type (cygwin32 (quote cygwin)) (windows-nt (if (getenv "CYGWIN") (quote cygwin) (quote windows))) (otherwise (quote other))))) nil [74862 75799]) ("ecb-tar-setup" variable (:user-visible-flag t :default-value (cons (if (fboundp (quote executable-find)) (executable-find "tar") "tar") (case system-type (cygwin32 (quote cygwin)) (windows-nt (if (getenv "CYGWIN") (quote cygwin) (quote windows))) (otherwise (quote other))))) nil [75801 76724]) ("ecb-upgrade-make-file-arg" function (:arguments ("file" "path-type")) nil [76727 77424]) ("ecb-package-version-str2list" function (:arguments ("ver-str")) nil [77426 78483]) ("ecb-package-version-list<" function (:arguments ("ver1" "ver2")) nil [78559 79103]) ("ecb-package-version-string<" function (:arguments ("ver1-str" "ver2-str")) nil [79105 79378]) ("ecb-package-version-list2str" function (:arguments ("ver")) nil [79380 79803]) ("ecb-package-get-matching-versions-str" function (:arguments ("package" "package-url" "min-list" "max-list")) nil [79805 82220]) ("ecb-download-ecb" function (:user-visible-flag t) nil [82224 83619]) ("ecb-download-semantic" function (:user-visible-flag t) nil [83621 85374]) ("ecb-package-display-xemacs-package-info" function (:arguments ("package")) nil [85376 86480]) ("ecb-package-download-ecb/semantic" function (:arguments ("package" "curr-version" "url")) nil [86483 88288]) ("ecb-package-download" function (:arguments ("package" "version" "url")) nil [88291 96193]) ("ecb-package-get-available-versions" function (:arguments ("package" "package-url")) nil [96195 100535]) ("silentcomp-provide" code nil nil [100540 100573]))
    :file "ecb-upgrade.el"
    :pointmax 100604
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ecb-util.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [1666 1687]) ("cl" include nil nil [1709 1722]) ("silentcomp-defun" code nil nil [1797 1838]) ("silentcomp-defun" code nil nil [1839 1878]) ("silentcomp-defun" code nil nil [1879 1907]) ("silentcomp-defun" code nil nil [1908 1941]) ("silentcomp-defun" code nil nil [1942 1973]) ("silentcomp-defun" code nil nil [1974 2005]) ("silentcomp-defun" code nil nil [2006 2040]) ("silentcomp-defun" code nil nil [2041 2083]) ("silentcomp-defun" code nil nil [2084 2120]) ("silentcomp-defun" code nil nil [2121 2158]) ("silentcomp-defun" code nil nil [2159 2192]) ("silentcomp-defun" code nil nil [2202 2237]) ("silentcomp-defvar" code nil nil [2238 2272]) ("silentcomp-defun" code nil nil [2273 2304]) ("silentcomp-defun" code nil nil [2305 2342]) ("silentcomp-defun" code nil nil [2343 2372]) ("silentcomp-defun" code nil nil [2373 2403]) ("silentcomp-defun" code nil nil [2404 2434]) ("silentcomp-defun" code nil nil [2445 2479]) ("silentcomp-defun" code nil nil [2480 2514]) ("silentcomp-defun" code nil nil [2515 2547]) ("silentcomp-defun" code nil nil [2548 2577]) ("silentcomp-defvar" code nil nil [2587 2622]) ("silentcomp-defvar" code nil nil [2623 2665]) ("silentcomp-defun" code nil nil [2666 2699]) ("silentcomp-defun" code nil nil [2700 2735]) ("silentcomp-defvar" code nil nil [2736 2772]) ("silentcomp-defvar" code nil nil [2773 2813]) ("silentcomp-defun" code nil nil [2841 2873]) ("silentcomp-defun" code nil nil [2874 2905]) ("silentcomp-defun" code nil nil [2932 2967]) ("silentcomp-defun" code nil nil [2968 2999]) ("silentcomp-defun" code nil nil [3001 3031]) ("ecb-running-xemacs" variable (:constant-flag t :default-value (string-match "XEmacs\\|Lucid" emacs-version)) nil [3110 3185]) ("ecb-running-xemacs" variable (:constant-flag t :default-value (featurep (quote xemacs))) nil [3186 3234]) ("ecb-running-unsupported-emacs" variable (:constant-flag t :default-value (condition-case nil (<= emacs-major-version 20) (error t))) nil [3236 3463]) ("ecb-temp-dir" variable (:constant-flag t :default-value (file-name-as-directory (or (getenv "TMPDIR") (getenv "TMP") (getenv "TEMP") (if (eq system-type (quote windows-nt)) "c:/temp/" "/tmp/")))) nil [3465 3685]) ("ecb-ecb-dir" variable (:constant-flag t :default-value (expand-file-name (file-name-directory (locate-library "ecb")))) nil [3687 3775]) ("ecb-semantic-dir" variable (:constant-flag t :default-value (if (locate-library "semantic") (expand-file-name (file-name-directory (locate-library "semantic"))))) nil [3776 3913]) ("ecb-ecb-parent-dir" variable (:constant-flag t :default-value (expand-file-name (concat ecb-ecb-dir "../"))) nil [3915 3990]) ("ecb-regular-xemacs-package-p" variable (:constant-flag t :default-value (and ecb-running-xemacs (file-exists-p (expand-file-name (concat ecb-ecb-dir "_pkg.el"))) (file-exists-p (expand-file-name (concat ecb-ecb-dir "auto-autoloads.el"))))) nil [4171 4393]) ("ecb-semantic-regular-xemacs-package-p" variable (:constant-flag t :default-value (and ecb-running-xemacs ecb-semantic-dir (file-exists-p (expand-file-name (concat ecb-semantic-dir "_pkg.el"))) (file-exists-p (expand-file-name (concat ecb-semantic-dir "auto-autoloads.el"))))) nil [4394 4659]) ("ecb-images-can-be-used" variable (:constant-flag t :default-value (and (or (fboundp (quote defimage)) (fboundp (quote make-image-specifier))) (if (fboundp (quote display-images-p)) (display-images-p) window-system))) nil [4661 4863]) ("when-ecb-running-xemacs" function (:arguments ("&rest" "body")) nil [5052 5305]) ("when-ecb-running-emacs" function (:arguments ("&rest" "body")) nil [5307 5566]) ("when" code nil nil [5703 8048]) ("unless" code nil nil [8050 9380]) ("if" code nil nil [9407 10254]) ("if" code nil nil [10286 10938]) ("if" code nil nil [10956 11594]) ("ecb-basic-adviced-functions" variable (:constant-flag t :default-value (if ecb-running-xemacs (quote ((delete-frame . around) (compilation-set-window-height . around) (shrink-window-if-larger-than-buffer . around) (show-temp-buffer-in-current-frame . around) (pop-to-buffer . around) (current-window-configuration . after) (set-window-configuration . after) (scroll-other-window . around) (custom-save-all . around) (count-windows . around) (scroll-all-mode . after))) (quote ((delete-frame . around) (compilation-set-window-height . around) (resize-temp-buffer-window . around) (shrink-window-if-larger-than-buffer . around) (mouse-drag-vertical-line . around) (mouse-drag-mode-line . around) (pop-to-buffer . around) (current-window-configuration . after) (set-window-configuration . after) (enlarge-window . around) (shrink-window . around) (tmm-prompt . around) (scroll-other-window . around) (custom-save-all . around) (count-windows . around) (scroll-all-mode . after))))) nil [12017 14549]) ("ecb-enable-advices" function (:arguments ("advice-list")) nil [14551 14806]) ("ecb-disable-advices" function (:arguments ("advice-list")) nil [14810 15068]) ("ecb-with-original-basic-functions" function (:arguments ("&rest" "body")) nil [15073 15589]) ("ecb-enable-ecb-advice" function (:arguments ("function-symbol" "advice-type" "arg")) nil [15591 16049]) ("ecb-with-ecb-advice" function (:arguments ("function-symbol" "advice-type" "&rest" "body")) nil [16051 16572]) ("put" code nil nil [16574 16624]) ("ecb-custom-file" function nil nil [16689 17072]) ("custom-save-all" function (:arguments ("around" "ecb")) nil [17074 19709]) ("ecb-option-get-value" function (:arguments ("option" "&optional" "type")) nil [19711 20574]) ("ecb-remove-assoc" function (:arguments ("key" "list")) nil [20638 20890]) ("ecb-add-assoc" function (:arguments ("key-value" "list")) nil [20893 20955]) ("ecb-find-assoc-value" function (:arguments ("key" "list")) nil [20957 21021]) ("ecb-find-assoc" function (:arguments ("key" "list")) nil [21023 21075]) ("ecb-filter" function (:arguments ("seq" "pred")) nil [21139 21383]) ("ecb-some" function (:arguments ("cl-pred" "cl-seq" "&rest" "cl-rest")) nil [21385 21905]) ("ecb-copy-list" function (:arguments ("list")) nil [21907 22293]) ("ecb-set-difference" function (:arguments ("list1" "list2")) nil [22295 22879]) ("ecb-member" function (:arguments ("item" "list" "&optional" "test-fcn")) nil [22881 23482]) ("ecb-position" function (:arguments ("seq" "elem" "&optional" "test-fcn")) nil [23484 24044]) ("ecb-set-elt" function (:arguments ("seq" "n" "val")) nil [24046 24298]) ("ecb-remove-elt" function (:arguments ("seq" "n")) nil [24300 24542]) ("ecb-replace-first-occurence" function (:arguments ("seq" "old-elem" "new-elem")) nil [24544 24850]) ("ecb-replace-all-occurences" function (:arguments ("seq" "old-elem" "new-elem")) nil [24852 25161]) ("ecb-remove-first-occurence-from-list" function (:arguments ("list" "elem")) nil [25163 25451]) ("ecb-remove-all-occurences-from-list" function (:arguments ("list" "elem")) nil [25453 25891]) ("ecb-subseq" function (:arguments ("seq" "start" "&optional" "end")) nil [25893 26974]) ("ecb-concatenate" function (:arguments ("type" "&rest" "seqs")) nil [26976 27322]) ("ecb-rotate" function (:arguments ("seq" "start-elem")) nil [27324 27916]) ("ecb-last" function (:arguments ("seq")) nil [27918 28103]) ("ecb-first" function (:arguments ("seq")) nil [28105 28269]) ("ecb-next-listelem" function (:arguments ("list" "elem" "&optional" "nth-next")) nil [28274 29154]) ("ecb-member-of-symbol/value-list" function (:arguments ("value" "list" "&optional" "elem-accessor" "return-accessor")) nil [29202 30248]) ("ecb-match-regexp-list" function (:arguments ("str" "regexp-list" "&optional" "elem-accessor" "return-accessor")) nil [30921 31754]) ("ecb-multicache-init" function (:arguments ("cache-var")) nil [31840 32229]) ("ecb-multicache-add-empty-key" function (:arguments ("cache-var" "key")) nil [32231 33053]) ("ecb-multicache-get-subcache" function (:arguments ("cache-var" "key" "subcache")) nil [33055 33507]) ("defecb-multicache" function (:arguments ("name" "size" "test" "subcache" "docstring")) nil [33550 35379]) ("put" code nil nil [35380 35428]) ("ecb-multicache-p" function (:arguments ("cache-var")) nil [35523 35738]) ("ecb-multicache-get-value" function (:arguments ("cache-var" "key" "subcache")) nil [35740 36471]) ("ecb-multicache-get-values" function (:arguments ("cache-var" "key" "&optional" "subcache-list")) nil [36473 37375]) ("ecb-multicache-apply-to-value" function (:arguments ("cache-var" "key" "subcache" "apply-fcn" "&optional" "only-if-key-exist")) nil [37377 39357]) ("ecb-multicache-put-value" function (:arguments ("cache-var" "key" "subcache" "value")) nil [39367 40046]) ("ecb-multicache-clear-value" function (:arguments ("cache-var" "key" "subcache")) nil [40048 40416]) ("ecb-multicache-remove" function (:arguments ("cache-var" "key")) nil [40418 40703]) ("ecb-multicache-mapsubcache" function (:arguments ("cache-var" "subcache" "mapfcn")) nil [40705 41659]) ("ecb-multicache-clear-subcache" function (:arguments ("cache-var" "subcache")) nil [41661 42066]) ("ecb-multicache-clear" function (:arguments ("cache-var")) nil [42068 42340]) ("ecb-multicache-print-subcache" function (:arguments ("cache-var" "subcache" "&optional" "no-nil-value")) nil [42342 45262]) ("ecb-confirm" function (:arguments ("text")) nil [45329 45376]) ("ecb-query-string" function (:arguments ("prompt" "choices" "&optional" "other-prompt")) nil [45493 46977]) ("ecb-offer-choices" function (:arguments ("prompt" "choices")) nil [47088 48074]) ("ecb-read-number" function (:arguments ("prompt" "&optional" "init-value")) nil [50119 50965]) ("ecb-message-box" function (:arguments ("message-str" "&optional" "title-text" "button-text")) nil [50967 52317]) ("ecb-nolog-message" function (:arguments ("&rest" "args")) nil [56799 57573]) ("ecb-error" function (:arguments ("&rest" "args")) nil [57575 57920]) ("ecb-warning" function (:arguments ("&rest" "args")) nil [57922 58054]) ("ecb-info-message" function (:arguments ("&rest" "args")) nil [58056 58195]) ("ecb-merge-face-into-text" function (:arguments ("text" "face")) nil [58259 60435]) ("if" code nil nil [60437 62064]) ("ecb-string=" function (:arguments ("str1" "str2" "&optional" "ignore-case")) nil [62066 62317]) ("ecb-string<" function (:arguments ("str1" "str2" "&optional" "ignore-case")) nil [62319 62638]) ("ecb-excessive-trim" function (:arguments ("str")) nil [62640 63014]) ("ecb-left-trim" function (:arguments ("str")) nil [63270 63560]) ("ecb-right-trim" function (:arguments ("str")) nil [63562 63702]) ("ecb-trim" function (:arguments ("str")) nil [63704 63822]) ("ecb-full-trim" function (:arguments ("str")) nil [63824 63942]) ("ecb-fit-str-to-width" function (:arguments ("str" "width" "from")) nil [63944 64706]) ("ecb-normalize-number" function (:arguments ("value" "&optional" "ref-value")) nil [64770 65153]) ("ecb-working-message" variable nil nil [65619 65693]) ("ecb-working-donestring" variable nil nil [65694 65775]) ("ecb-working-ref1" variable nil nil [65776 65851]) ("ecb-working-last-percent" variable nil nil [65852 65933]) ("ecb-working-frame-animation-display" function (:arguments ("length" "number" "frames")) nil [65935 67189]) ("ecb-working-celeron-strings" variable (:default-value ["[O     ]" "[oO    ]" "[-oO   ]" "[ -oO  ]" "[  -oO ]" "[   -oO]" "[    -O]" "[     O]" "[    Oo]" "[   Oo-]" "[  Oo- ]" "[ Oo-  ]" "[Oo-   ]" "[O-    ]"]) nil [67191 67437]) ("ecb-working-celeron-display" function (:arguments ("length" "number")) nil [67439 67997]) ("ecb-working-dynamic-status" function (:arguments ("&optional" "number")) nil [68001 68445]) ("ecb-working-status-timeout" function (:arguments ("timeout" "message" "donestr" "&rest" "forms")) nil [68447 69441]) ("ecb-working-status-call-process" function (:arguments ("timeout" "message" "donestr" "program" "&optional" "infile" "buffer" "display" "&rest" "args")) nil [69444 70615]) ("ecb-current-line" function nil nil [70679 70849]) ("ecb-with-readonly-buffer" function (:arguments ("buffer" "&rest" "body")) nil [70851 71483]) ("put" code nil nil [71485 71540]) ("ecb-do-if-buffer-visible-in-ecb-frame" function (:arguments ("buffer-name-symbol" "&rest" "body")) nil [71542 72918]) ("put" code nil nil [72919 72987]) ("ecb-buffer-substring" function (:arguments ("minpoint" "maxpoint" "&optional" "buffer")) nil [72989 73301]) ("ecb-delete-file" function (:arguments ("file")) nil [73303 73474]) ("ecb-buffer-name" function (:arguments ("buffer-or-name")) nil [73476 73680]) ("ecb-buffer-obj" function (:arguments ("buffer-or-name")) nil [73682 73886]) ("ecb-buffer-local-value" function (:arguments ("sym" "buffer")) nil [73888 74289]) ("ecb-file-content-as-string" function (:arguments ("file")) nil [74292 74809]) ("ecb-current-buffer-archive-extract-p" function nil nil [74811 75213]) ("ecb-buffer-or-file-readable-p" function (:arguments ("&optional" "filename")) nil [75215 75952]) ("ecb-window-list" function (:arguments ("&optional" "frame" "minibuf" "window")) nil [76407 78444]) ("ecb-canonical-windows-list" function nil nil [78446 78723]) ("ecb-enlarge-window" function (:arguments ("window" "&optional" "val")) nil [78725 79532]) ("ecb-scroll-window" function (:arguments ("point" "window-start")) nil [79534 79777]) ("ecb-window-select" function (:arguments ("buffer-or-name")) nil [79779 80191]) ("ecb-exec-in-window" function (:arguments ("buffer-or-name" "&rest" "body")) nil [80193 80698]) ("put" code nil nil [80700 80749]) ("ecb-make-windows-not-dedicated" function (:arguments ("&optional" "frame")) nil [80751 80990]) ("ecb-set-windows-dedicated-state" function (:arguments ("buf-list" "state")) nil [80992 81370]) ("ecb-window-number" function (:arguments ("&optional" "window")) nil [81373 82645]) ("ecb-time-to-seconds" function (:arguments ("time")) nil [82753 82917]) ("ecb-seconds-to-time" function (:arguments ("seconds")) nil [82919 83140]) ("ecb-subtract-time" function (:arguments ("t1" "t2")) nil [83142 83390]) ("ecb-time-diff" function (:arguments ("t1" "t2" "&optional" "rounded")) nil [83392 83703]) ("ecb-time-less-p" function (:arguments ("t1" "t2")) nil [83852 84022]) ("ring" include nil nil [84086 84101]) ("defalias" code nil nil [84102 84138]) ("defalias" code nil nil [84139 84169]) ("defalias" code nil nil [84170 84212]) ("defalias" code nil nil [84213 84253]) ("defalias" code nil nil [84254 84288]) ("ecb-ring-elements" function (:arguments ("ring")) nil [84337 84445]) ("ecb-max-submenu-depth" variable (:default-value 4) nil [84509 84605]) ("ecb-create-menu-user-ext-type" function (:arguments ("curr-level" "max-level")) nil [84607 85759]) ("ecb-is-byte-compiling" function nil nil [85787 85990]) ("ecb-load-in-progress-p" function nil nil [85992 86044]) ("silentcomp-provide" code nil nil [86111 86141]))
    :file "ecb-util.el"
    :pointmax 86208
    :unmatched-syntax 'nil
    )
   (semanticdb-table "tree-buffer.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [1556 1577]) ("cl" include nil nil [1630 1643]) ("silentcomp-defun" code nil nil [1662 1703]) ("silentcomp-defun" code nil nil [1704 1743]) ("silentcomp-defun" code nil nil [1744 1772]) ("silentcomp-defun" code nil nil [1773 1811]) ("silentcomp-defun" code nil nil [1812 1849]) ("silentcomp-defun" code nil nil [1850 1887]) ("silentcomp-defun" code nil nil [1888 1922]) ("silentcomp-defun" code nil nil [1923 1955]) ("silentcomp-defun" code nil nil [1956 1996]) ("silentcomp-defun" code nil nil [1997 2036]) ("silentcomp-defun" code nil nil [2037 2066]) ("silentcomp-defun" code nil nil [2067 2118]) ("silentcomp-defun" code nil nil [2119 2171]) ("silentcomp-defvar" code nil nil [2172 2204]) ("silentcomp-defvar" code nil nil [2214 2249]) ("silentcomp-defvar" code nil nil [2250 2292]) ("silentcomp-defun" code nil nil [2293 2323]) ("silentcomp-defun" code nil nil [2324 2354]) ("silentcomp-defun" code nil nil [2355 2384]) ("silentcomp-defun" code nil nil [2385 2420]) ("silentcomp-defun" code nil nil [2421 2456]) ("silentcomp-defun" code nil nil [2457 2498]) ("silentcomp-defun" code nil nil [2499 2536]) ("silentcomp-defun" code nil nil [2537 2566]) ("silentcomp-defun" code nil nil [2567 2608]) ("silentcomp-defun" code nil nil [2635 2667]) ("silentcomp-defun" code nil nil [2668 2699]) ("tree-buffer-running-xemacs" variable (:constant-flag t :default-value (string-match "XEmacs\\|Lucid" emacs-version)) nil [2701 2786]) ("if" code nil nil [2818 5418]) ("if" code nil nil [5445 6095]) ("if" code nil nil [6114 7183]) ("tree-buffer-copy-list" function (:arguments ("list")) nil [7208 7602]) ("tree-buffer-member" function (:arguments ("item" "list" "&optional" "test-fcn")) nil [7604 8214]) ("tree-buffer-position" function (:arguments ("seq" "elem" "&optional" "test-fcn")) nil [8216 8792]) ("tree-buffer-set-elt" function (:arguments ("seq" "n" "val")) nil [8794 9054]) ("tree-buffer-remove-elt" function (:arguments ("seq" "n")) nil [9056 9328]) ("tree-buffer-aset" function (:arguments ("array" "idx" "newelt")) nil [9330 9456]) ("tree-buffer-nolog-message" function (:arguments ("&rest" "args")) nil [9458 10248]) ("tree-buffer-current-line" function nil nil [10250 10428]) ("tree-buffer-debug-mode" variable nil nil [10444 10679]) ("tree-buffer-debug-error" function (:arguments ("&rest" "args")) nil [10681 11035]) ("tree-node" type (:members ("name" "type" "data" "children" "parent" "shrink-name" "expandable" "expanded" "displayed-name" "indentstr") :type "struct") nil [11051 11287]) ("tree-node-new" function (:arguments ("name" "type" "data" "&optional" "not-expandable" "parent" "shrink-name")) nil [11289 13500]) ("tree-node-indentlength" function (:arguments ("node")) nil [13502 13622]) ("tree-node-linelength" function (:arguments ("node")) nil [13624 13924]) ("tree-node-toggle-expanded" function (:arguments ("node")) nil [13926 14077]) ("tree-node-indent-level" function (:arguments ("node")) nil [14079 14354]) ("tree-node-new-root" function nil nil [14356 14595]) ("tree-node-update" function (:arguments ("node" "name" "type" "data" "expandable" "shrink-name")) nil [14597 15292]) ("tree-node-add-children" function (:arguments ("node" "children" "&optional" "at-beginning")) nil [15294 16247]) ("tree-node-sort-children" function (:arguments ("node" "sortfn")) nil [16249 16561]) ("tree-node-remove-child" function (:arguments ("node" "child")) nil [16563 16782]) ("tree-node-find-child-by-data" function (:arguments ("node" "child-data")) nil [16784 17217]) ("tree-node-remove-child-by-data" function (:arguments ("node" "child-data")) nil [17219 17933]) ("tree-node-find-child-by-name" function (:arguments ("node" "child-name")) nil [17935 18194]) ("tree-node-search-subtree-by-data" function (:arguments ("node" "data")) nil [18196 18753]) ("tree-buffer-root" variable nil nil [18830 18962]) ("tree-buffer-displayed-nodes" variable nil nil [18964 19145]) ("tree-buffer-initialize-displayed-nodes" function nil nil [19147 19299]) ("tree-buffer-number-of-displayed-nodes" function nil nil [19301 19441]) ("tree-buffer-nth-displayed-node" function (:arguments ("n")) nil [19443 19652]) ("tree-buffer-find-displayed-node-by-data" function (:arguments ("node-data" "&optional" "start-node")) nil [19654 21045]) ("tree-buffer-search-displayed-node-list" function (:arguments ("search-fcn")) nil [21047 21372]) ("tree-buffer-displayed-node-nr" function (:arguments ("node")) nil [21374 21656]) ("tree-buffer-displayed-node-linenr" function (:arguments ("node")) nil [21658 21837]) ("tree-buffer-add-to-displayed-nodes" function (:arguments ("node")) nil [21839 22063]) ("tree-buffer-displayed-nodes-remove-nth" function (:arguments ("n")) nil [22065 22256]) ("tree-buffer-displayed-nodes-remove-node" function (:arguments ("node")) nil [22258 22472]) ("tree-buffer-displayed-nodes-replace-nth" function (:arguments ("n" "new-node")) nil [22474 22699]) ("tree-buffer-displayed-nodes-replace-node" function (:arguments ("node" "new-node")) nil [22701 23020]) ("tree-buffer-set-displayed-nodes" function (:arguments ("displayed-nodes")) nil [23022 23291]) ("tree-buffer-displayed-nodes-copy" function nil nil [23293 23529]) ("tree-buffer-map-displayed-nodes" function (:arguments ("function")) nil [23531 23862]) ("tree-buffer-frame" variable nil nil [23904 24024]) ("tree-buffer-key-map" variable nil nil [24026 24153]) ("tree-buffer-highlighted-node-data" variable nil nil [24155 24309]) ("tree-buffer-highlight-overlay" variable nil nil [24311 24477]) ("tree-buffer-general-overlay" variable nil nil [24479 24646]) ("tree-buffer-spec" variable nil nil [24648 24729]) ("tree-buffer-hscroll-number" variable nil nil [24731 24874]) ("tree-buffer-spec" type (:members ("tree-indent" "menu-creator" "menu-titles" "modeline-menu-creator" "type-facer" "expand-symbol-before-p" "mouse-action-trigger" "is-click-valid-fn" "node-selected-fn" "node-expanded-fn" "node-collapsed-fn" "node-mouse-over-fn" "mouse-highlight-fn" "node-data-equal-fn" "after-update-hook" "maybe-empty-node-types" "leaf-node-types" "general-face" "incr-search-additional-pattern" "incr-search-p" "hor-scroll-step" "default-images-dir" "additional-images-dir" "image-file-prefix" "style" "ascii-guide-face") :type "struct") nil [24907 26052]) ("tree-buffer-spec-new" function (:arguments ("&key" "tree-indent" "menu-creator" "menu-titles" "modeline-menu-creator" "type-facer" "expand-symbol-before-p" "mouse-action-trigger" "is-click-valid-fn" "node-selected-fn" "node-expanded-fn" "node-collapsed-fn" "node-mouse-over-fn" "mouse-highlight-fn" "node-data-equal-fn" "after-update-hook" "maybe-empty-node-types" "leaf-node-types" "general-face" "incr-search-additional-pattern" "incr-search-p" "hor-scroll-step" "default-images-dir" "additional-images-dir" "image-file-prefix" "style" "ascii-guide-face")) nil [26054 30553]) ("tree-buffer-incr-searchpattern-expand-prefix" variable (:constant-flag t :default-value "\\(\\[[^][]+\\] ?\\)?\\[?") nil [30596 30755]) ("tree-buffer-incr-searchpattern" variable nil nil [30757 30913]) ("tree-buffer-last-incr-searchpattern" variable nil nil [30915 31142]) ("tree-buffer-incr-searchpattern-indent-prefix" variable nil nil [31144 31544]) ("tree-buffer-data-store" variable nil nil [31621 31818]) ("tree-buffer-set-data-store" function (:arguments ("data")) nil [31820 31943]) ("tree-buffer-get-data-store" function nil nil [31945 32068]) ("tree-buffer-local-image-cache" variable nil nil [32145 32299]) ("tree-buffer-images-can-be-used" variable (:constant-flag t :default-value (and (or (fboundp (quote defimage)) (fboundp (quote make-image-specifier))) (if (fboundp (quote display-images-p)) (display-images-p) window-system))) nil [32301 32511]) ("tree-buffer-image-properties-emacs" variable (:default-value (quote (:ascent center :mask (heuristic t)))) nil [32513 32632]) ("tree-buffer-image-properties-xemacs" variable nil nil [32634 32717]) ("tree-buffer-enable-xemacs-image-bug-hack" variable (:default-value tree-buffer-running-xemacs) nil [32719 32966]) ("tree-buffer-image-formats" variable (:constant-flag t :default-value (quote ((xpm ".xpm") (png ".png") (gif ".gif") (jpeg ".jpg" ".jpeg") (xbm ".xbm")))) nil [32968 33087]) ("tree-buffer-expand-symbol-length" variable (:constant-flag t :default-value 3) nil [33089 33134]) ("tree-buffer-indent-with-images" variable (:constant-flag t :default-value 3) nil [33135 33178]) ("tree-buffer-indent-w/o-images-before-min" variable (:constant-flag t :default-value 3) nil [33179 33232]) ("tree-buffer-indent-w/o-images-after-min" variable (:constant-flag t :default-value 2) nil [33233 33285]) ("tree-buffer-tree-image-names" variable (:constant-flag t :default-value (quote (("open" (after . "[-]") (before . "[-]")) ("close" (after . "[+]") (before . "[+]")) ("empty" (after . "[x]") (before . "[x]")) ("leaf" (after . "*") (before . "*")) ("guide" (after . "|") (before . " |")) ("no-guide" (after . " ") (before . "  ")) ("end-guide" (after . "`") (before . " `")) ("handle" (after . "-") (before . "-")) ("no-handle" (after . " ") (before . " "))))) nil [33287 34130]) ("if" code nil nil [34132 34990]) ("tree-buffer-real-style" function (:arguments ("&optional" "style")) nil [34992 35646]) ("tree-buffer-ascii-symbol-4-image-name" function (:arguments ("name")) nil [35648 36939]) ("tree-buffer-add-image-icon-maybe" function (:arguments ("start" "len" "str" "image-icon")) nil [36942 38787]) ("tree-buffer-image-cache-get" function (:arguments ("tree-image-name")) nil [38789 38921]) ("tree-buffer-image-cache-put" function (:arguments ("tree-image-name" "image")) nil [38923 39112]) ("tree-buffer-find-image" function (:arguments ("tree-image-name")) nil [39114 41986]) ("tree-buffers" variable nil nil [42064 42089]) ("tree-buffer-syntax-table" variable nil nil [42091 42168]) ("if" code nil nil [42170 42759]) ("tree-buffer-get-node-name-start-column" function (:arguments ("node")) nil [42834 43849]) ("tree-buffer-get-node-name-start-point" function (:arguments ("node")) nil [43857 44343]) ("tree-buffer-get-node-name-end-point" function (:arguments ("node")) nil [44345 44678]) ("tree-buffer-point-at-expand-symbol-p" function (:arguments ("node" "p")) nil [44680 45745]) ("tree-buffer-point-at-node-name-p" function (:arguments ("node" "p")) nil [45747 46113]) ("tree-buffer-get-node-at-point" function (:arguments ("&optional" "p")) nil [46115 46351]) ("tree-buffer-select" function (:arguments ("mouse-button" "shift-pressed" "control-pressed" "meta-pressed")) nil [46353 49954]) ("tree-buffer-node-data-equal-p" function (:arguments ("node-data-1" "node-data-2")) nil [49957 50420]) ("tree-buffer-get-node-facer" function (:arguments ("node")) nil [50422 50632]) ("tree-buffer-pos-hor-visible-p" function (:arguments ("pos" "window")) nil [50634 50950]) ("tree-buffer-hscroll" function (:arguments ("amount")) nil [50952 51086]) ("tree-buffer-mouse-hscroll" function (:user-visible-flag t :arguments ("e")) nil [51284 52051]) ("tree-buffer-count-subnodes-to-display" function (:arguments ("node")) nil [52053 52925]) ("tree-buffer-recenter" function (:arguments ("node" "window")) nil [52927 58636]) ("tree-buffer-remove-highlight" function nil nil [58638 58883]) ("tree-buffer-highlight-node-data" function (:arguments ("node-data" "&optional" "start-node" "dont-make-visible")) nil [58885 60847]) ("tree-buffer-help-echo-fn" function (:arguments ("win" "obj" "pos")) nil [60849 61422]) ("tree-buffer-merge-face-into-text" function (:arguments ("face" "start" "end" "&optional" "text")) nil [61424 63643]) ("tree-buffer-insert-text" function (:arguments ("text" "&optional" "facer" "help-echo" "mouse-highlight")) nil [63746 64571]) ("tree-buffer-node-display-name" function (:arguments ("node")) nil [64574 65995]) ("tree-buffer-insert-node-display" function (:arguments ("node" "&optional" "no-newline")) nil [65999 68559]) ("tree-buffer-gen-guide-strings" function nil nil [68561 70832]) ("tree-buffer-add-node" function (:arguments ("node" "indent-str-first-segs" "indent-str-last-seg" "&optional" "last-children")) nil [70834 75266]) ("tree-buffer-update-node" function (:arguments ("node" "name" "shrink-name" "type" "data" "expandable" "&optional" "redisplay")) nil [75268 78413]) ("tree-buffer-clear-tree" function nil nil [78415 78621]) ("tree-buffer-remove-node" function (:arguments ("node" "&optional" "redisplay" "empty-parent-types")) nil [78623 80622]) ("tree-buffer-build-tree-buffer-display" function nil nil [80624 81040]) ("tree-buffer-display-in-general-face" function nil nil [81042 81369]) ("tree-buffer-empty-p" function nil nil [81532 81644]) ("tree-buffer-run-after-update-hook" function nil nil [81646 81847]) ("tree-buffer-update" function (:arguments ("&optional" "node" "content")) nil [81849 83584]) ("tree-buffer-scroll-window" function (:arguments ("point" "window-start")) nil [83587 83833]) ("tree-buffer-expand-node" function (:arguments ("node" "level" "&optional" "expand-pred-fn" "collapse-pred-fn")) nil [83835 86711]) ("tree-buffer-expand-node-internal" function (:arguments ("node" "current-level" "level" "expand-pred-fn" "collapse-pred-fn")) nil [86713 88146]) ("tree-buffer-set-root" function (:arguments ("root")) nil [88148 88443]) ("tree-buffer-get-root" function nil nil [88445 88544]) ("tree-buffer-gen-searchpattern-indent-prefix" function (:arguments ("&optional" "count")) nil [88546 89144]) ("tree-buffer-find-common-substring" function (:arguments ("lis" "subs" "&optional" "only-prefix")) nil [89225 91039]) ("tree-buffer-incremental-node-search" function (:user-visible-flag t) nil [91041 94753]) ("tree-buffer-create-menu-emacs" function (:arguments ("menu-def" "menu-name")) nil [94755 95756]) ("tree-buffer-create-menu-xemacs" function (:arguments ("menu-def" "&optional" "node-commands-p")) nil [95759 96947]) ("tree-buffer-create-menu" function (:arguments ("menu-items" "&optional" "node-commands-p")) nil [96949 98792]) ("tree-buffer-create-menus" function (:arguments ("menus" "&optional" "node-commands-p")) nil [98795 99413]) ("tree-buffer-show-node-menu-keyboard" function (:user-visible-flag t :arguments ("&optional" "use-tmm")) nil [99671 101237]) ("tree-buffer-popup-menu" function (:arguments ("event" "menu" "menu-title" "&optional" "node")) nil [101239 102555]) ("tree-buffer-show-node-menu" function (:arguments ("event")) nil [102557 103802]) ("tree-buffer-show-modeline-menu" function (:arguments ("event")) nil [103804 104375]) ("tree-buffer-defpopup-command" function (:arguments ("name" "docstring" "&rest" "body")) nil [104377 107040]) ("put" code nil nil [107042 107101]) ("tree-buffer-follow-mouse" function (:arguments ("event")) nil [107168 108148]) ("tree-buffer-activate-follow-mouse" function nil nil [108150 108756]) ("tree-buffer-deactivate-follow-mouse" function nil nil [108758 109053]) ("tree-buffer-tab-pressed" function (:user-visible-flag t) nil [109072 110009]) ("tree-buffer-arrow-pressed" function (:user-visible-flag t) nil [110011 111741]) ("tree-buffer-create-mouse-key" function (:arguments ("button" "trigger" "&optional" "modifier")) nil [111768 113145]) ("tree-buffer-create" function (:arguments ("name" "&key" "frame" "mouse-action-trigger" "is-click-valid-fn" "node-selected-fn" "node-expanded-fn" "node-collapsed-fn" "node-mouse-over-fn" "mouse-highlight-fn" "node-data-equal-fn" "maybe-empty-node-types" "leaf-node-types" "menu-creator" "menu-titles" "modeline-menu-creator" "trunc-lines" "read-only" "tree-indent" "incr-search-p" "incr-search-additional-pattern" "arrow-navigation" "hor-scroll-step" "default-images-dir" "additional-images-dir" "image-file-prefix" "tree-style" "ascii-guide-face" "type-facer" "expand-symbol-before-p" "highlight-node-face" "general-face" "after-create-hook" "after-update-hook")) nil [113147 141960]) ("tree-buffer-destroy" function (:arguments ("tree-buffer-name")) nil [141962 142391]) ("tree-buffer-font-lock-keywords" variable (:constant-flag t :default-value (eval-when-compile (let* ((vf (quote ("tree-buffer-defpopup-command"))) (kf (if vf (regexp-opt vf t) "")) (kf-depth (if kf (regexp-opt-depth kf) nil)) (full (concat "(\\(" kf "\\)" "\\>[ 	]*\\(\\sw+\\)?"))) (\` (((\, full) (1 font-lock-keyword-face) ((\, (+ 1 kf-depth 1)) font-lock-function-name-face nil t))))))) nil [142412 143115]) ("when" code nil nil [143117 143261]) ("silentcomp-provide" code nil nil [143264 143297]))
    :file "tree-buffer.el"
    :pointmax 143328
    )
   (semanticdb-table "ecb-file-browser.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("ecb-util" include nil nil [1273 1292]) ("tree-buffer" include nil nil [1293 1315]) ("ecb-mode-line" include nil nil [1316 1340]) ("ecb-navigate" include nil nil [1341 1364]) ("ecb-face" include nil nil [1365 1384]) ("ecb-speedbar" include nil nil [1385 1408]) ("ecb-layout" include nil nil [1409 1430]) ("ecb-common-browser" include nil nil [1431 1460]) ("assoc" include nil nil [1479 1495]) ("cl" include nil nil [1547 1560]) ("silentcomp" include nil nil [1584 1605]) ("silentcomp-defun" code nil nil [1608 1655]) ("silentcomp-defvar" code nil nil [1656 1693]) ("defgroup" code nil nil [1824 1952]) ("defgroup" code nil nil [1954 2075]) ("defgroup" code nil nil [2077 2197]) ("defgroup" code nil nil [2199 2321]) ("ecb-source-path" variable (:user-visible-flag t) nil [2323 3553]) ("ecb-add-path-for-not-matching-files" variable (:user-visible-flag t :default-value (quote (t))) nil [3555 5029]) ("ecb-source-path-functions" variable nil nil [5032 5326]) ("ecb-display-default-dir-after-start" variable (:user-visible-flag t :default-value t) nil [5329 6249]) ("ecb-show-sources-in-directories-buffer" variable (:user-visible-flag t :default-value (quote ("left7" "left13" "left14" "left15"))) nil [6252 7116]) ("ecb-directories-show-node-info" variable (:user-visible-flag t :default-value (quote (if-too-long . path))) nil [7119 8625]) ("ecb-directories-update-speedbar" variable (:user-visible-flag t :default-value (quote auto)) nil [8627 10882]) ("ecb-show-sources-in-directories-buffer-p" function nil nil [10885 11266]) ("ecb-cache-directory-contents" variable (:user-visible-flag t :default-value (quote (("^/\\([^:/]*@\\)?\\([^@:/]*\\):.*" . 0) (".*" . 50)))) nil [11268 13652]) ("ecb-cache-directory-contents-not" variable (:user-visible-flag t) nil [13655 14830]) ("ecb-ping-program" variable (:default-value "ping") nil [14832 14991]) ("ecb-ping-options" variable (:default-value (if (eq system-type (quote windows-nt)) (list "-n" "1") (list "-c" "1"))) nil [14993 15402]) ("ecb-host-accessible-check-valid-time" variable nil nil [15404 16607]) ("ecb-prescan-directories-for-emptyness" variable (:user-visible-flag t :default-value (quote unless-remote)) nil [16609 18608]) ("ecb-prescan-directories-exclude-regexps" variable (:user-visible-flag t) nil [18610 18992]) ("ecb-directory-should-prescanned-p" function (:arguments ("dir")) nil [18994 19521]) ("ecb-after-directory-change-hook" variable (:user-visible-flag t) nil [19523 20633]) ("ecb-sources-perform-read-only-check" variable (:user-visible-flag t :default-value (quote unless-remote)) nil [20635 21721]) ("ecb-read-only-check-exclude-regexps" variable (:user-visible-flag t) nil [21723 22146]) ("ecb-sources-read-only-check-p" function (:arguments ("dir")) nil [22148 22675]) ("ecb-directories-buffer-name" variable (:user-visible-flag t :default-value " *ECB Directories*") nil [22677 23193]) ("ecb-excluded-directories-regexps" variable (:user-visible-flag t :default-value (quote ("^\\(CVS\\|\\.[^xX]*\\)$"))) nil [23196 23484]) ("ecb-check-dir-exclude" function (:arguments ("dir")) nil [23486 23587]) ("ecb-auto-expand-directory-tree" variable (:user-visible-flag t :default-value (quote best)) nil [23589 24152]) ("ecb-sources-buffer-name" variable (:user-visible-flag t :default-value " *ECB Sources*") nil [24155 24651]) ("ecb-sources-show-node-info" variable (:user-visible-flag t :default-value (quote (if-too-long . name))) nil [24653 25913]) ("ecb-sources-exclude-cvsignore" variable (:user-visible-flag t) nil [25915 26581]) ("ecb-source-file-regexps" variable (:user-visible-flag t :default-value (quote ((".*" ("\\(^\\(\\.\\|#\\)\\|\\(~$\\|\\.\\(elc\\|obj\\|o\\|class\\|lib\\|dll\\|a\\|so\\|cache\\)$\\)\\)") ("^\\.\\(emacs\\|gnus\\)$"))))) nil [26583 29857]) ("ecb-show-source-file-extension" variable (:user-visible-flag t :default-value t) nil [29860 29989]) ("ecb-sources-sort-method" variable (:user-visible-flag t :default-value (quote name)) nil [29991 30588]) ("ecb-sources-sort-ignore-case" variable (:user-visible-flag t :default-value t) nil [30590 30776]) ("ecb-history-buffer-name" variable (:user-visible-flag t :default-value " *ECB History*") nil [30778 31274]) ("ecb-history-exclude-file-regexps" variable (:user-visible-flag t :default-value (quote ("TAGS$" "semantic\\.cache$"))) nil [31276 31644]) ("ecb-check-filename-for-history-exclude" function (:arguments ("filename")) nil [31646 31774]) ("ecb-history-show-node-info" variable (:user-visible-flag t :default-value (quote (always . path))) nil [31776 32803]) ("ecb-history-sort-method" variable (:user-visible-flag t :default-value (quote name)) nil [32805 33428]) ("ecb-history-sort-ignore-case" variable (:user-visible-flag t :default-value t) nil [33430 33597]) ("ecb-kill-buffer-clears-history" variable (:user-visible-flag t) nil [33599 34287]) ("ecb-history-item-name" variable (:user-visible-flag t :default-value (quote buffer-name)) nil [34290 34579]) ("ecb-directories-menu-user-extension" variable (:user-visible-flag t :default-value (quote (("Version Control" (ecb-dir-popup-cvs-status "CVS Status") (ecb-dir-popup-cvs-examine "CVS Examine") (ecb-dir-popup-cvs-update "CVS Update"))))) nil [34581 36927]) ("ecb-directories-menu-user-extension-function" variable (:user-visible-flag t :default-value (quote ignore)) nil [36929 37686]) ("ecb-sources-menu-user-extension" variable (:user-visible-flag t :default-value (quote (("Version control" (ecb-file-popup-ediff-revision "Ediff against revision") ("---") (ecb-file-popup-vc-next-action "Check In/Out") (ecb-file-popup-vc-log "Revision history") (ecb-file-popup-vc-annotate "Annotate") (ecb-file-popup-vc-diff "Diff against last version") ("---") (ecb-file-popup-vc-refresh-file "Recompute state for file") (ecb-file-popup-vc-refresh-dir "Recompute state for whole dir"))))) nil [37688 38717]) ("ecb-sources-menu-user-extension-function" variable (:user-visible-flag t :default-value (quote ignore)) nil [38719 39444]) ("ecb-history-menu-user-extension" variable (:user-visible-flag t :default-value (quote (("Version control" (ecb-file-popup-ediff-revision "Ediff against revision") ("---") (ecb-file-popup-vc-next-action "Check In/Out") (ecb-file-popup-vc-log "Revision history") (ecb-file-popup-vc-annotate "Annotate") (ecb-file-popup-vc-diff "Diff against last version") ("---") (ecb-file-popup-vc-refresh-file "Recompute state for file") (ecb-file-popup-vc-refresh-all-files "Recompute state for whole history"))))) nil [39446 40489]) ("ecb-history-menu-user-extension-function" variable (:user-visible-flag t :default-value (quote ignore)) nil [40491 41216]) ("ecb-directories-menu-sorter" variable (:user-visible-flag t) nil [41218 42170]) ("ecb-sources-menu-sorter" variable (:user-visible-flag t) nil [42173 42894]) ("ecb-history-menu-sorter" variable (:user-visible-flag t) nil [42897 43618]) ("ecb-directories-buffer-after-create-hook" variable (:user-visible-flag t) nil [43621 44158]) ("ecb-sources-buffer-after-create-hook" variable (:user-visible-flag t) nil [44161 44592]) ("ecb-history-buffer-after-create-hook" variable (:user-visible-flag t) nil [44595 45026]) ("ecb-vc-enable-support" variable (:user-visible-flag t :default-value (quote unless-remote)) nil [45028 46421]) ("ecb-vc-directory-exclude-regexps" variable (:user-visible-flag t) nil [46423 46813]) ("ecb-vc-xemacs-exclude-remote-cvs-repository" variable (:user-visible-flag t :default-value (if ecb-running-xemacs t nil)) nil [46815 47735]) ("ecb-vc-directory-should-be-checked-p" function (:arguments ("dir")) nil [47737 48220]) ("ecb-vc-state-mapping" variable (:user-visible-flag t :default-value (quote ((up-to-date . up-to-date) (edited . edited) (locally-modified . edited) (needs-patch . needs-patch) (needs-checkout . needs-patch) (needs-merge . needs-merge) (unlocked-changes . unlocked-changes) (added . added) (locally-added . added) (ignored . ignored) (unknown . unknown)))) nil [48222 53043]) ("ecb-vc-supported-backends" variable (:user-visible-flag t :default-value (delq nil (if ecb-running-xemacs (\` ((ecb-vc-dir-managed-by-CVS . vc-cvs-status))) (\` ((ecb-vc-dir-managed-by-CVS . ecb-vc-state) (ecb-vc-dir-managed-by-RCS . ecb-vc-state) (ecb-vc-dir-managed-by-SCCS . ecb-vc-state) (ecb-vc-dir-managed-by-SVN . ecb-vc-state)))))) nil [53045 56455]) ("ecb-directories-nodetype-directory" variable (:constant-flag t) nil [56956 57003]) ("ecb-directories-nodetype-sourcefile" variable (:constant-flag t :default-value 1) nil [57004 57052]) ("ecb-directories-nodetype-sourcepath" variable (:constant-flag t :default-value 2) nil [57053 57101]) ("ecb-sources-nodetype-sourcefile" variable (:constant-flag t) nil [57102 57146]) ("ecb-history-nodetype-sourcefile" variable (:constant-flag t) nil [57147 57191]) ("ecb-path-selected-directory" variable nil nil [57194 57276]) ("ecb-path-selected-source" variable nil nil [57278 57354]) ("ecb-files-and-subdirs-cache-add" function (:arguments ("dir" "cached-value")) nil [57402 57625]) ("ecb-files-and-subdirs-cache-get" function (:arguments ("dir")) nil [57627 57816]) ("ecb-files-and-subdirs-cache-remove" function (:arguments ("dir")) nil [57818 57971]) ("ecb-files-and-subdirs-cache-clear" function nil nil [57973 58135]) ("ecb-files-and-subdirs-cache-dump" function (:user-visible-flag t :arguments ("&optional" "no-nil-value")) nil [58137 58555]) ("ecb-directory-empty-cache-add" function (:arguments ("dir" "cached-value")) nil [58599 58820]) ("ecb-directory-empty-cache-get" function (:arguments ("dir")) nil [58822 58990]) ("ecb-directory-empty-cache-remove" function (:arguments ("dir")) nil [58992 59149]) ("ecb-directory-empty-cache-remove-all" function (:arguments ("dir")) nil [59151 60090]) ("ecb-directory-empty-cache-clear" function nil nil [60092 60240]) ("ecb-directory-empty-cache-dump" function (:user-visible-flag t :arguments ("&optional" "no-nil-value")) nil [60242 60595]) ("ecb-sources-cache-remove" function (:arguments ("dir")) nil [60634 60787]) ("ecb-sources-cache-add-full" function (:arguments ("dir" "cache-elem-full")) nil [60789 61377]) ("ecb-sources-cache-add-filtered" function (:arguments ("dir" "cache-elem-filtered")) nil [61379 62003]) ("ecb-sources-cache-get-full" function (:arguments ("dir")) nil [62005 62325]) ("ecb-sources-cache-get-filtered" function (:arguments ("dir")) nil [62327 62670]) ("ecb-sources-cache-clear" function nil nil [62672 62804]) ("ecb-sources-cache-dump" function (:user-visible-flag t :arguments ("&optional" "no-nil-value")) nil [62806 63110]) ("ecb-vc-cache-add-file" function (:arguments ("file" "state" "checked-buffer-names")) nil [63143 63434]) ("ecb-vc-cache-add-dir" function (:arguments ("dir" "backend")) nil [63436 63553]) ("ecb-vc-cache-get" function (:arguments ("file")) nil [63555 63644]) ("ecb-vc-cache-remove" function (:arguments ("file")) nil [63646 63775]) ("ecb-vc-cache-remove-files-of-dir" function (:arguments ("dir")) nil [63777 64887]) ("ecb-vc-cache-clear" function nil nil [64890 65007]) ("ecb-vc-cache-dump" function (:user-visible-flag t :arguments ("&optional" "no-nil-value")) nil [65009 65298]) ("ecb-remote-path-cache-add" function (:arguments ("path" "remote-path")) nil [65340 65567]) ("ecb-remote-path-cache-get" function (:arguments ("path")) nil [65569 65741]) ("ecb-remote-path-cache-dump" function (:user-visible-flag t :arguments ("&optional" "no-nil-value")) nil [65743 66059]) ("ecb-host-accessible-cache-add" function (:arguments ("host" "accessible-p")) nil [66105 66374]) ("ecb-host-accessible-cache-get" function (:arguments ("host" "valid-time")) nil [66376 66914]) ("ecb-host-accessible-cache-dump" function (:user-visible-flag t :arguments ("&optional" "no-nil-value")) nil [66916 67244]) ("ecb-file-browser-initialize-caches" function nil nil [67317 67473]) ("ecb-file-browser-initialize" function (:arguments ("&optional" "no-caches")) nil [67475 67815]) ("ecb-goto-window-directories" function (:user-visible-flag t) nil [67819 68184]) ("ecb-goto-window-sources" function (:user-visible-flag t) nil [68186 68545]) ("ecb-goto-window-history" function (:user-visible-flag t) nil [68547 68697]) ("ecb-maximize-window-directories" function (:user-visible-flag t) nil [68699 69159]) ("ecb-maximize-window-sources" function (:user-visible-flag t) nil [69161 69608]) ("ecb-maximize-window-history" function (:user-visible-flag t) nil [69610 69951]) ("defecb-window-dedicator" code nil nil [69953 71040]) ("defecb-window-dedicator" code nil nil [71042 72091]) ("defecb-window-dedicator" code nil nil [72094 72287]) ("ecb-expand-directory-tree" function (:arguments ("path" "node")) nil [72290 73476]) ("ecb-check-directory-for-caching" function (:arguments ("dir" "number-of-contents")) nil [73479 74388]) ("ecb-check-directory-for-source-regexps" function (:arguments ("dir")) nil [74391 74656]) ("ecb-files-from-cvsignore" function (:arguments ("dir")) nil [74659 75210]) ("ecb-check-directory-for-cvsignore-exclude" function (:arguments ("dir")) nil [75213 75407]) ("ecb-get-sources-sort-function" function (:arguments ("sort-method" "&optional" "ignore-case")) nil [75409 76186]) ("ecb-get-files-and-subdirs" function (:arguments ("dir")) nil [76189 78366]) ("ecb-update-sources-buffer" function (:arguments ("dir-before-update")) nil [78369 81245]) ("ecb-sources-filter-by-ext" function (:arguments ("ext-str")) nil [81247 81589]) ("tree-buffer-defpopup-command" code nil nil [81591 81895]) ("ecb-sources-filter-by-regexp" function nil nil [81897 82149]) ("tree-buffer-defpopup-command" code nil nil [82153 82294]) ("tree-buffer-defpopup-command" code nil nil [82298 82450]) ("ecb-sources-filter" function (:user-visible-flag t) nil [82455 83592]) ("ecb-sources-filter-modeline-prefix" function (:arguments ("buffer-name" "sel-dir" "sel-source")) nil [83594 84065]) ("ecb-apply-filter-to-sources-buffer" function (:arguments ("filter-regexp" "&optional" "filter-display")) nil [84067 86899]) ("ecb-matching-source-paths" function (:arguments ("path-to-match" "&optional" "sorted")) nil [86901 88142]) ("ecb-get-best-matching-source-path" function (:arguments ("path")) nil [88144 88286]) ("ecb-set-selected-directory" function (:arguments ("path" "&optional" "force")) nil [88288 93582]) ("ecb-get-source-name" function (:arguments ("filename")) nil [93585 93803]) ("ecb-select-source-file" function (:arguments ("filename" "&optional" "force")) nil [93806 94820]) ("ecb-history-filter" variable nil nil [94823 95161]) ("ecb-reset-history-filter" function nil nil [95163 95314]) ("ecb-history-filter-reset-p" function nil nil [95316 95387]) ("ecb-reset-history-filter" code nil nil [95389 95415]) ("ecb-add-all-buffers-to-history" function (:user-visible-flag t) nil [95417 95854]) ("ecb-add-buffers-to-history" function nil nil [95856 96866]) ("ecb-history-filter-modeline-prefix" function (:arguments ("buffer-name" "sel-dir" "sel-source")) nil [96871 97228]) ("ecb-add-item-to-history-buffer" function (:arguments ("filename")) nil [97231 98575]) ("ecb-sort-history-buffer" function nil nil [98578 102426]) ("ecb-update-history-window" function (:arguments ("&optional" "filename")) nil [102429 102680]) ("ecb-set-selected-source" function (:arguments ("filename" "other-edit-window" "no-edit-buffer-selection" "hide")) nil [102682 104201]) ("ecb-clear-history" function (:user-visible-flag t) nil [104217 104560]) ("ecb-update-directory-node" function (:arguments ("node")) nil [104564 105765]) ("ecb-get-source-paths-from-functions" function nil nil [105768 106189]) ("ecb-update-directories-buffer" function (:user-visible-flag t) nil [106192 108074]) ("ecb-host-accessible-valid-time" function (:arguments ("host")) nil [108099 108439]) ("ecb-host-accessible-p" function (:arguments ("host")) nil [108500 109155]) ("silentcomp-defun" code nil nil [109208 109244]) ("silentcomp-defun" code nil nil [109245 109276]) ("silentcomp-defun" code nil nil [109277 109314]) ("silentcomp-defun" code nil nil [109315 109354]) ("silentcomp-defun" code nil nil [109355 109399]) ("silentcomp-defun" code nil nil [109400 109439]) ("silentcomp-defun" code nil nil [109440 109482]) ("ecb-remote-path" function (:arguments ("path")) nil [109483 111806]) ("ecb-check-emptyness-of-dir" function (:arguments ("dir")) nil [111903 113179]) ("defecb-stealthy" code nil nil [113182 115656]) ("ecb-stealthy-read-only-check--internal" function (:arguments ("state")) nil [115679 118350]) ("defecb-stealthy" code nil nil [118353 118832]) ("defecb-stealthy" code nil nil [118834 119208]) ("ecb-vc-state-icon-alist" variable (:constant-flag t :default-value (quote ((up-to-date "vc-up-to-date" "(u)") (edited "vc-edited" "(e)") (added "vc-added" "(a)") (needs-patch "vc-needs-patch" "(p)") (needs-merge "vc-needs-merge" "(m)") (ignored "vc-ignored" "(x)") (unknown "vc-unknown" "(?)") (nil "vc-unknown" "(?)")))) nil [120086 121033]) ("ecb-vc-get-image-name-for-vc-state" function (:arguments ("state")) nil [121035 121226]) ("ecb-vc-get-ascii-icon-for-vc-state" function (:arguments ("state")) nil [121230 121415]) ("ecb-vc-incr-searchpattern-node-prefix" variable (:constant-flag t :default-value (quote ("\\(\\(([uempx?])\\)? \\)?" . 2))) nil [121418 121779]) ("ecb-vc-check-state" function (:arguments ("file" "tree-buffer-name" "vc-state-fcn")) nil [121782 125875]) ("ecb-vc-update-sources-cache" function (:arguments ("dir")) nil [125877 127523]) ("ecb-vc-cvs-root-remote-p" function (:arguments ("root")) nil [127525 127803]) ("ecb-vc-dir-managed-by-CVS" function (:arguments ("directory")) nil [128756 131894]) ("ecb-vc-dir-managed-by-RCS" function (:arguments ("directory")) nil [131897 132069]) ("ecb-vc-dir-managed-by-SVN" function (:arguments ("directory")) nil [132071 132277]) ("ecb-vc-dir-managed-by-SCCS" function (:arguments ("directory")) nil [132279 132636]) ("silentcomp-defun" code nil nil [132783 132829]) ("ecb-vc-dir-managed-by-CC" function (:arguments ("directory")) nil [132830 133053]) ("silentcomp-defun" code nil nil [133055 133103]) ("ecb-vc-check-CC-state" function (:arguments ("file")) nil [133104 133699]) ("clearcase-sync-from-disk" function (:arguments ("after" "ecb")) nil [133701 134134]) ("ecb-vc-state" function (:arguments ("file")) nil [134136 134405]) ("ecb-vc-get-state-fcn-for-dir" function (:arguments ("directory")) nil [134407 135625]) ("defalias" code nil nil [135627 135689]) ("ecb-vc-generate-node-name" function (:arguments ("name" "state")) nil [135691 136995]) ("ecb-stealthy-vc-check--dir/history" function (:arguments ("state")) nil [137063 140241]) ("ecb-stealthy-vc-check--sources" function (:arguments ("state")) nil [140243 144077]) ("defecb-stealthy" code nil nil [144079 144466]) ("defecb-stealthy" code nil nil [144469 144861]) ("defecb-stealthy" code nil nil [144863 145364]) ("ecb-vc-reset-vc-stealthy-checks" function nil nil [145366 146708]) ("ecb-vc-advices" variable (:default-value (quote ((vc-checkin . after) (clearcase-sync-from-disk . after)))) nil [147783 147994]) ("ecb-checkedin-file" variable nil nil [147996 148369]) ("vc-checkin" function (:arguments ("after" "ecb")) nil [148371 148590]) ("ecb-vc-checkin-hook" function nil nil [148592 148919]) ("ecb-vc-after-revert-hook" function nil nil [148921 149250]) ("ecb-vc-enable-internals" function (:arguments ("arg")) nil [149252 149859]) ("ecb-stealth-tasks-after-directories-update" function nil nil [150041 150443]) ("ecb-stealth-tasks-after-sources-update" function nil nil [150445 150764]) ("ecb-stealth-tasks-after-history-update" function nil nil [150766 151010]) ("ecb-tree-node-add-files" function (:arguments ("node" "path" "files" "type" "include-extension" "old-children" "&optional" "not-expandable")) nil [151054 152664]) ("ecb-new-child" function (:arguments ("old-children" "name" "type" "data" "&optional" "not-expandable" "shrink-name")) nil [152666 153379]) ("ecb-add-source-path" function (:user-visible-flag t :arguments ("&optional" "dir" "alias" "no-prompt-for-future-session")) nil [153381 154486]) ("tree-buffer-defpopup-command" code nil nil [154488 154630]) ("tree-buffer-defpopup-command" code nil nil [154633 154772]) ("ecb-delete-s" function (:arguments ("child" "children" "sources")) nil [154775 154965]) ("tree-buffer-defpopup-command" code nil nil [154968 155589]) ("ecb-remove-dir-from-caches" function (:arguments ("dir")) nil [155592 155811]) ("ecb-directory-update-speedbar" function (:arguments ("dir")) nil [155813 156623]) ("ecb-directory-clicked" function (:arguments ("node" "ecb-button" "edit-window-nr" "shift-mode" "meta-mode")) nil [156625 159753]) ("ecb-source-file-clicked" function (:arguments ("node" "ecb-button" "edit-window-nr" "shift-mode" "meta-mode")) nil [159755 160692]) ("ecb-source-clicked" function (:arguments ("node" "ecb-button" "edit-window-nr" "shift-mode" "meta-mode")) nil [160694 161155]) ("ecb-history-clicked" function (:arguments ("node" "ecb-button" "edit-window-nr" "shift-mode" "meta-mode")) nil [161157 161620]) ("ecb-expand-directory-nodes" function (:user-visible-flag t :arguments ("level")) nil [161622 162177]) ("ecb-get-file-info-text" function (:arguments ("file")) nil [162180 162665]) ("ecb-mouse-over-directory-node" function (:arguments ("node" "&optional" "window" "no-message" "click-force")) nil [162668 164149]) ("ecb-mouse-over-source-node" function (:arguments ("node" "&optional" "window" "no-message" "click-force")) nil [164152 165070]) ("ecb-mouse-over-history-node" function (:arguments ("node" "&optional" "window" "no-message" "click-force")) nil [165073 165967]) ("tree-buffer-defpopup-command" code nil nil [165997 166971]) ("ecb-grep-directory-internal" function (:arguments ("node" "find")) nil [166974 167789]) ("tree-buffer-defpopup-command" code nil nil [167792 167927]) ("tree-buffer-defpopup-command" code nil nil [167930 168057]) ("ecb-create-directory" function (:arguments ("parent-node")) nil [168060 168297]) ("tree-buffer-defpopup-command" code nil nil [168300 168623]) ("ecb-dired-directory-internal" function (:arguments ("node" "&optional" "other")) nil [168626 169093]) ("tree-buffer-defpopup-command" code nil nil [169096 169218]) ("tree-buffer-defpopup-command" code nil nil [169221 169383]) ("ecb-dir-run-cvs-op" function (:arguments ("node" "op" "op-arg-list")) nil [169386 169506]) ("tree-buffer-defpopup-command" code nil nil [169509 169672]) ("tree-buffer-defpopup-command" code nil nil [169675 169837]) ("tree-buffer-defpopup-command" code nil nil [169840 169999]) ("ecb-common-directories-menu" variable nil nil [170002 170042]) ("setq" code nil nil [170045 170573]) ("ecb-directories-menu" variable nil nil [170576 170720]) ("setq" code nil nil [170721 170943]) ("ecb-directories-menu-title-creator" variable (:default-value (function (lambda (node) (let ((node-type (tree-node->type node)) (node-data (tree-node->name node))) (cond ((= node-type ecb-directories-nodetype-directory) (format "%s  (Directory)" node-data)) ((= node-type ecb-directories-nodetype-sourcefile) (format "%s  (File)" node-data)) ((= node-type ecb-directories-nodetype-sourcepath) (format "%s  (Source-path)" node-data))))))) nil [170946 171700]) ("tree-buffer-defpopup-command" code nil nil [171702 171941]) ("tree-buffer-defpopup-command" code nil nil [171942 172089]) ("tree-buffer-defpopup-command" code nil nil [172090 172237]) ("tree-buffer-defpopup-command" code nil nil [172238 172385]) ("tree-buffer-defpopup-command" code nil nil [172386 172533]) ("tree-buffer-defpopup-command" code nil nil [172534 172681]) ("tree-buffer-defpopup-command" code nil nil [172682 172829]) ("tree-buffer-defpopup-command" code nil nil [172830 172977]) ("ecb-dir/source/hist-menu-editwin-entries" function nil nil [172979 173682]) ("ecb-directories-menu-creator" function (:arguments ("tree-buffer-name" "node")) nil [173685 175130]) ("ecb-source-path-menu" variable nil nil [175155 175290]) ("setq" code nil nil [175291 175507]) ("tree-buffer-defpopup-command" code nil nil [175510 175976]) ("tree-buffer-defpopup-command" code nil nil [175979 176150]) ("tree-buffer-defpopup-command" code nil nil [176153 176321]) ("tree-buffer-defpopup-command" code nil nil [176324 176492]) ("tree-buffer-defpopup-command" code nil nil [176495 176653]) ("tree-buffer-defpopup-command" code nil nil [176655 176837]) ("tree-buffer-defpopup-command" code nil nil [176839 177051]) ("tree-buffer-defpopup-command" code nil nil [177053 177337]) ("ecb-sources-menu" variable nil nil [177339 177410]) ("setq" code nil nil [177412 178106]) ("ecb-sources-menu-title-creator" variable (:default-value (function (lambda (node) (ecb-file-name-nondirectory (tree-node->data node))))) nil [178109 178326]) ("ecb-sources-menu-creator" function (:arguments ("tree-buffer-name" "node")) nil [178328 179100]) ("tree-buffer-defpopup-command" code nil nil [179121 179332]) ("ecb-history-filter-by-ext" function (:arguments ("ext-str")) nil [179334 179929]) ("tree-buffer-defpopup-command" code nil nil [179931 180294]) ("ecb-history-filter-by-regexp" function nil nil [180296 180714]) ("tree-buffer-defpopup-command" code nil nil [180716 180861]) ("tree-buffer-defpopup-command" code nil nil [180865 181042]) ("tree-buffer-defpopup-command" code nil nil [181046 181506]) ("ecb-history-filter" function (:user-visible-flag t) nil [181508 182391]) ("ecb-history-menu" variable nil nil [182393 182464]) ("setq" code nil nil [182467 183259]) ("ecb-history-menu-title-creator" variable (:default-value (function (lambda (node) (tree-node->name node)))) nil [183262 183450]) ("ecb-history-menu-creator" function (:arguments ("tree-buffer-name" "node")) nil [183452 184195]) ("defecb-tree-buffer-creator" code nil nil [184225 187507]) ("defecb-tree-buffer-creator" code nil nil [187509 190107]) ("defecb-tree-buffer-creator" code nil nil [190109 192383]) ("silentcomp-provide" code nil nil [192386 192424]))
    :file "ecb-file-browser.el"
    :pointmax 192460
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ecb-method-browser.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("tree-buffer" include nil nil [1339 1361]) ("ecb-util" include nil nil [1362 1381]) ("ecb-layout" include nil nil [1382 1403]) ("ecb-mode-line" include nil nil [1404 1428]) ("ecb-navigate" include nil nil [1429 1452]) ("ecb-face" include nil nil [1453 1472]) ("ecb-speedbar" include nil nil [1473 1496]) ("ecb-common-browser" include nil nil [1497 1526]) ("ecb-semantic-wrapper" include nil nil [1528 1559]) ("semantic-load" include nil nil [1615 1639]) ("assoc" include nil nil [1658 1674]) ("cl" include nil nil [1726 1739]) ("silentcomp" include nil nil [1763 1784]) ("silentcomp-defun" code nil nil [1787 1819]) ("silentcomp-defun" code nil nil [1820 1852]) ("silentcomp-defun" code nil nil [1853 1885]) ("silentcomp-defvar" code nil nil [1886 1919]) ("silentcomp-defvar" code nil nil [1920 1961]) ("silentcomp-defvar" code nil nil [1962 2000]) ("silentcomp-defun" code nil nil [2002 2056]) ("silentcomp-defun" code nil nil [2057 2104]) ("ecb-selected-tag" variable nil nil [2106 2176]) ("make-variable-buffer-local" code nil nil [2177 2223]) ("ecb-methods-root-node" variable nil nil [2225 2298]) ("ecb-methods-nodetype-tag" variable (:constant-flag t) nil [2300 2337]) ("ecb-methods-nodetype-bucket" variable (:constant-flag t :default-value 1) nil [2338 2378]) ("ecb-methods-nodetype-externtag" variable (:constant-flag t :default-value 2) nil [2379 2422]) ("ecb-method-browser-initialize-caches" function nil nil [2424 2556]) ("ecb-method-browser-initialize" function (:arguments ("&optional" "no-caches")) nil [2558 2986]) ("defgroup" code nil nil [3116 3236]) ("defgroup" code nil nil [3239 3361]) ("ecb-methods-buffer-name" variable (:user-visible-flag t :default-value " *ECB Methods*") nil [3364 3860]) ("ecb-auto-expand-tag-tree" variable (:user-visible-flag t :default-value (quote expand-spec)) nil [3863 4844]) ("ecb-auto-expand-tag-tree-collapse-other" variable (:user-visible-flag t) nil [4847 5796]) ("ecb-expand-methods-switch-off-auto-expand" variable (:user-visible-flag t :default-value t) nil [5798 6548]) ("ecb-auto-update-methods-after-save" variable (:user-visible-flag t :default-value t) nil [6551 6711]) ("ecb-font-lock-tags" variable (:user-visible-flag t :default-value t) nil [6714 7086]) ("ecb-tag-jump-sets-mark" variable (:user-visible-flag t :default-value t) nil [7089 7271]) ("ecb-tag->text-functions" variable (:constant-flag t :default-value (mapcar (lambda (fkt-elem) (cons (intern (concat "ecb-" (mapconcat (quote identity) (cdr (split-string (symbol-name (cdr fkt-elem)) "-")) "-"))) (intern (concat "ecb--" (symbol-name (cdr fkt-elem)))))) ecb--semantic-format-function-alist)) nil [7273 7872]) ("ecb-tag-display-function" variable (:user-visible-flag t :default-value (quote ((default . ecb-format-tag-uml-prototype)))) nil [7874 11814]) ("ecb-get-tag-display-function" function nil nil [11816 12155]) ("ecb-type-tag-display" variable (:user-visible-flag t) nil [12160 17086]) ("ecb-get-face-for-type-tag" function (:arguments ("type-specifier")) nil [17088 17526]) ("ecb-get-remove-specifier-flag-for-type-tag" function (:arguments ("type-specifier")) nil [17529 18001]) ("ecb-type-tag-expansion" variable (:user-visible-flag t :default-value (quote ((default "class" "interface" "group" "namespace") (c-mode "struct")))) nil [18003 20940]) ("ecb-type-tag-expansion" function (:arguments ("type-specifier")) nil [20944 21511]) ("ecb-faux-group-tag-p" function (:arguments ("tag")) nil [21513 21804]) ("ecb-get-type-specifier" function (:arguments ("tag")) nil [21806 21923]) ("dolist" code nil nil [21928 26945]) ("ecb-display-image-icons-for-semantic-tags" variable (:user-visible-flag t :default-value ecb-images-can-be-used) nil [26947 27245]) ("ecb-use-images-for-semantic-tags" function nil nil [27247 27417]) ("ecb-post-process-semantic-taglist" variable (:user-visible-flag t :default-value (quote ((c++-mode ecb-group-function-tags-with-parents) (emacs-lisp-mode ecb-group-function-tags-with-parents) (c-mode ecb-filter-c-prototype-tags)))) nil [27419 28882]) ("ecb-default-tag-filter" variable (:user-visible-flag t) nil [28884 30865]) ("ecb-show-only-positioned-tags" variable (:user-visible-flag t :default-value t) nil [30870 31555]) ("ecb-show-tags" variable (:user-visible-flag t :default-value (quote ((default (include collapsed nil) (parent collapsed nil) (type flattened nil) (variable collapsed access) (function flattened access) (label hidden nil) (t collapsed nil)) (c++-mode (include collapsed nil) (parent collapsed nil) (type flattened nil) (variable collapsed access) (function flattened access) (function collapsed access) (label hidden nil) (t collapsed nil)) (c-mode (include collapsed nil) (parent collapsed nil) (type flattened nil) (variable collapsed access) (function flattened access) (function collapsed access) (label hidden nil) (t collapsed nil)) (bovine-grammar-mode (keyword collapsed name) (token collapsed name) (nonterminal flattened name) (rule flattened name) (t collapsed nil)) (wisent-grammar-mode (keyword collapsed name) (token collapsed name) (nonterminal flattened name) (rule flattened name) (t collapsed nil)) (texinfo-mode (section flattened nil) (def collapsed name) (t collapsed nil))))) nil [31558 36637]) ("ecb-get-show-tags-list" function nil nil [36639 36987]) ("ecb-methods-separate-prototypes" variable (:user-visible-flag t :default-value t) nil [36989 37911]) ("ecb-methods-filter-replace-existing" variable (:user-visible-flag t :default-value (quote never)) nil [37913 38854]) ("ecb-methods-nodes-expand-spec" variable (:user-visible-flag t :default-value (quote (type variable function section nonterminal keyword token))) nil [38856 40177]) ("ecb-methods-nodes-collapse-spec" variable (:user-visible-flag t :default-value (quote all)) nil [40180 40631]) ("ecb-methods-show-node-info" variable (:user-visible-flag t :default-value (quote (if-too-long . name+type))) nil [40633 41798]) ("ecb-exclude-parents-regexps" variable (:user-visible-flag t) nil [41801 42306]) ("ecb-check-parent-for-exclude" function (:arguments ("parent-name")) nil [42308 42427]) ("ecb-highlight-tag-with-point" variable (:user-visible-flag t :default-value (quote highlight-scroll)) nil [42429 43287]) ("ecb-highlight-tag-with-point-delay" variable (:user-visible-flag t :default-value 0.25) nil [43290 44462]) ("ecb-method-overlay" variable (:default-value (ecb-make-overlay 1 1)) nil [44465 44573]) ("ecb-overlay-put" code nil nil [44574 44636]) ("ecb-tag-visit-post-actions" variable (:user-visible-flag t :default-value (quote ((default ecb-tag-visit-smart-tag-start ecb-tag-visit-highlight-tag-header) (java-mode ecb-tag-visit-goto-doc-start) (jde-mode ecb-tag-visit-goto-doc-start)))) nil [44639 47502]) ("ecb-tag-visit-function-member-p" function (:arguments ("fnc")) nil [47505 47691]) ("ecb-methods-menu-user-extension" variable (:user-visible-flag t) nil [47693 48293]) ("ecb-methods-menu-user-extension-function" variable (:user-visible-flag t :default-value (quote ignore)) nil [48296 49114]) ("ecb-methods-menu-sorter" variable (:user-visible-flag t) nil [49116 49837]) ("ecb-methods-buffer-after-create-hook" variable (:user-visible-flag t) nil [49840 50271]) ("ecb-process-non-semantic-files" variable (:user-visible-flag t :default-value (if (locate-library "speedbar") t)) nil [50274 50609]) ("ecb-non-semantic-parsing-function" variable (:user-visible-flag t) nil [50612 52272]) ("ecb-non-semantic-methods-initial-expand" variable (:user-visible-flag t) nil [52275 52713]) ("ecb-auto-save-before-etags-methods-rebuild" variable (:user-visible-flag t :default-value t) nil [52716 53720]) ("ecb-non-semantic-exclude-modes" variable (:user-visible-flag t :default-value (quote (sh-mode fundamental-mode text-mode))) nil [53723 54603]) ("ecb-rebuild-non-semantic-methods-before-hook" variable (:user-visible-flag t) nil [54606 55311]) ("ecb-enter-debugger" function (:arguments ("&rest" "error-args")) nil [55438 55672]) ("ecb-semantic-assert-valid-tag" function (:arguments ("tag" "&optional" "no-reparse")) nil [55905 59090]) ("ecb-semantic-tag-buffer" function (:arguments ("tag")) nil [59093 59379]) ("ecb-semantic-tag-start" function (:arguments ("tag")) nil [59382 59666]) ("ecb-semantic-tag-end" function (:arguments ("tag")) nil [59669 59949]) ("ecb-semantic-current-nonterminal" function nil nil [60188 60565]) ("ecb-goto-window-methods" function (:user-visible-flag t) nil [60568 60927]) ("ecb-maximize-window-methods" function (:user-visible-flag t) nil [60929 61376]) ("defecb-window-dedicator" code nil nil [61378 62426]) ("ecb-create-node" function (:arguments ("parent-node" "display" "name" "data" "type")) nil [62429 62763]) ("ecb-get-tag-type-display" function (:arguments ("tag-type")) nil [62766 63050]) ("ecb-get-tag-parent-names" function (:arguments ("parents")) nil [63053 63629]) ("ecb-get-tag-parents" function (:arguments ("tag")) nil [63631 63932]) ("ecb-get-tag-name" function (:arguments ("tag" "&optional" "parent-tag")) nil [63979 64361]) ("ecb-find-add-tag-bucket" function (:arguments ("node" "type" "display" "sort-method" "buckets" "&optional" "parent-tag" "no-bucketize")) nil [64364 65104]) ("ecb-forbid-tag-display" function (:arguments ("tag")) nil [65106 65197]) ("ecb-allow-tag-display" function (:arguments ("tag")) nil [65201 65293]) ("ecb-tag-forbidden-display-p" function (:arguments ("tag")) nil [65295 65389]) ("ecb-show-at-least-one-tag-p" function (:arguments ("taglist")) nil [65391 65663]) ("ecb-apply-user-filter-to-tags" function (:arguments ("taglist")) nil [65781 67951]) ("ecb-tag-generate-node-name" function (:arguments ("text-name" "first-chars" "icon-name")) nil [67954 68366]) ("ecb-add-tag-bucket" function (:arguments ("node" "bucket" "display" "sort-method" "&optional" "parent-tag" "no-bucketize")) nil [68369 70663]) ("ecb-tag-image-name-alias-alist" variable (:constant-flag t :default-value (quote ((abstract (static (struct (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (class (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (interface (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (enum (nil . "enum-unknown") (unknown . "enum-unknown") (private . "enum-private") (protected . "enum-protected") (public . "enum-public")) (constructor (nil . "abstract-constructor-unknown") (unknown . "abstract-constructor-unknown") (private . "abstract-constructor-private") (protected . "abstract-constructor-protected") (public . "abstract-constructor-public")) (function (nil . "abstract-function-unknown-static") (unknown . "abstract-function-unknown-static") (private . "abstract-function-private-static") (protected . "abstract-function-protected-static") (public . "abstract-function-public-static")) (variable (nil . "abstract-variable-unknown-static") (unknown . "abstract-variable-unknown-static") (private . "abstract-variable-private-static") (protected . "abstract-variable-protected-static") (public . "abstract-variable-public-static"))) (not-static (struct (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (class (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (interface (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (enum (nil . "enum-unknown") (unknown . "enum-unknown") (private . "enum-private") (protected . "enum-protected") (public . "enum-public")) (constructor (nil . "abstract-constructor-unknown") (unknown . "abstract-constructor-unknown") (private . "abstract-constructor-private") (protected . "abstract-constructor-protected") (public . "abstract-constructor-public")) (function (nil . "abstract-function-unknown") (unknown . "abstract-function-unknown") (private . "abstract-function-private") (protected . "abstract-function-protected") (public . "abstract-function-public")) (variable (nil . "abstract-variable-unknown") (unknown . "abstract-variable-unknown") (private . "abstract-variable-private") (protected . "abstract-variable-protected") (public . "abstract-variable-public")))) (not-abstract (static (struct (nil . "class-unknown") (unknown . "class-unknown") (private . "class-private") (protected . "class-protected") (public . "class-public")) (class (nil . "class-unknown") (unknown . "class-unknown") (private . "class-private") (protected . "class-protected") (public . "class-public")) (interface (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (enum (nil . "enum-unknown") (unknown . "enum-unknown") (private . "enum-private") (protected . "enum-protected") (public . "enum-public")) (constructor (nil . "constructor-unknown") (unknown . "constructor-unknown") (private . "constructor-private") (protected . "constructor-protected") (public . "constructor-public")) (function (nil . "function-unknown-static") (unknown . "function-unknown-static") (private . "function-private-static") (protected . "function-protected-static") (public . "function-public-static")) (variable (nil . "variable-unknown-static") (unknown . "variable-unknown-static") (private . "variable-private-static") (protected . "variable-protected-static") (public . "variable-public-static"))) (not-static (struct (nil . "class-unknown") (unknown . "class-unknown") (private . "class-private") (protected . "class-protected") (public . "class-public")) (class (nil . "class-unknown") (unknown . "class-unknown") (private . "class-private") (protected . "class-protected") (public . "class-public")) (interface (nil . "abstract-class-unknown") (unknown . "abstract-class-unknown") (private . "abstract-class-private") (protected . "abstract-class-protected") (public . "abstract-class-public")) (enum (nil . "enum-unknown") (unknown . "enum-unknown") (private . "enum-private") (protected . "enum-protected") (public . "enum-public")) (constructor (nil . "constructor-unknown") (unknown . "constructor-unknown") (private . "constructor-private") (protected . "constructor-protected") (public . "constructor-public")) (function (nil . "function-unknown") (unknown . "function-unknown") (private . "function-private") (protected . "function-protected") (public . "function-public")) (variable (nil . "variable-unknown") (unknown . "variable-unknown") (private . "variable-private") (protected . "variable-protected") (public . "variable-public"))))))) nil [70667 82544]) ("ecb-get-icon-for-tag" function (:arguments ("abstract-p" "static-p" "type" "protection")) nil [82547 82865]) ("ecb-displayed-tag-name" function (:arguments ("tag" "&optional" "parent-tag")) nil [83214 84818]) ("ecb-children-tags" function (:arguments ("parent-tag")) nil [84820 85573]) ("ecb-update-tag-node" function (:arguments ("tag" "node" "&optional" "parent-tag" "no-bucketize")) nil [85600 86483]) ("ecb-post-process-taglist" function (:arguments ("taglist")) nil [86546 87111]) ("ecb-apply-tag-table-filters" function (:arguments ("taglist")) nil [87113 87534]) ("ecb-methods-filter-perform-current-type" function (:arguments ("filter" "taglist")) nil [87537 89517]) ("ecb-group-function-tags-with-parents" function (:arguments ("taglist")) nil [89519 89997]) ("ecb-filter-c-prototype-tags" function (:arguments ("taglist")) nil [89999 91272]) ("ecb-methods-user-filter-alist" variable nil nil [91336 91796]) ("ecb-methods-filter-by-prot" function (:arguments ("inverse" "source-buffer" "&optional" "prot")) nil [91799 92361]) ("ecb-methods-filter-by-tag-class" function (:arguments ("inverse" "source-buffer" "&optional" "tag-class")) nil [92363 93704]) ("ecb-methods-filter-by-regexp" function (:arguments ("inverse" "source-buffer" "&optional" "regexp")) nil [93846 94461]) ("tree-buffer-defpopup-command" code nil nil [94463 94661]) ("tree-buffer-defpopup-command" code nil nil [94663 94875]) ("ecb-methods-filter-by-function" function (:arguments ("inverse" "source-buffer" "&optional" "fcn-name")) nil [94877 95527]) ("tree-buffer-defpopup-command" code nil nil [95529 95740]) ("tree-buffer-defpopup-command" code nil nil [95742 95967]) ("tree-buffer-defpopup-command" code nil nil [95969 96212]) ("tree-buffer-defpopup-command" code nil nil [96214 96443]) ("ecb-get-type-node-of-node" function (:arguments ("node")) nil [96446 97059]) ("ecb-get-type-name-hierarchy-of-current-node" function nil nil [97062 98225]) ("ecb-get-type-tag-of-tag" function (:arguments ("&optional" "tag" "table" "always-parent-type")) nil [98228 101110]) ("ecb-get-type-name-hierarchy-of-current-tag" function (:arguments ("&optional" "tag")) nil [101113 102124]) ("ecb-methods-filter-by-current-type" function (:arguments ("inverse" "source-buffer" "&optional" "tag")) nil [102126 104268]) ("tree-buffer-defpopup-command" code nil nil [104296 104599]) ("ecb-get-source-buffer-for-tag-filter" function nil nil [104602 105137]) ("ecb-methods-filter-inverse" function (:user-visible-flag t) nil [105141 105347]) ("ecb-methods-filter-protection" function (:user-visible-flag t :arguments ("&optional" "inverse")) nil [105349 105654]) ("ecb-methods-filter-tagclass" function (:user-visible-flag t :arguments ("&optional" "inverse")) nil [105656 105957]) ("ecb-methods-filter-current-type" function (:user-visible-flag t) nil [105959 106183]) ("ecb-methods-filter-regexp" function (:user-visible-flag t :arguments ("&optional" "inverse")) nil [106185 106480]) ("ecb-methods-filter-function" function (:user-visible-flag t :arguments ("&optional" "inverse")) nil [106482 106783]) ("ecb-methods-filter-nofilter" function (:user-visible-flag t) nil [106785 106979]) ("ecb-methods-filter-delete-last" function (:user-visible-flag t) nil [106981 107192]) ("ecb-methods-filter" function (:user-visible-flag t :arguments ("&optional" "inverse")) nil [107194 110611]) ("ecb-methods-filter-internal" function (:arguments ("inverse" "&optional" "filter-type")) nil [110613 112587]) ("ecb-methods-filter-apply" function (:arguments ("filtertype" "filter" "inverse" "filter-type-display" "filter-display" "source-buffer" "&optional" "remove-last")) nil [112589 116112]) ("ecb-methods-filter-modeline-prefix" function (:arguments ("buffer-name" "sel-dir" "sel-source")) nil [116125 117610]) ("ecb-default-tag-filter-for-current-file" function nil nil [117612 118166]) ("ecb-apply-default-tag-filter" function nil nil [118168 120132]) ("ecb-find-file-hook" function nil nil [120134 120348]) ("ecb-add-tags" function (:arguments ("node" "tags" "&optional" "parent-tag" "no-bucketize")) nil [120389 121044]) ("ecb-access-order" function (:arguments ("access")) nil [121047 121291]) ("ecb-sort-tags" function (:arguments ("sort-method" "tags")) nil [121294 121789]) ("ecb-add-tag-buckets" function (:arguments ("node" "parent-tag" "buckets" "&optional" "no-bucketize")) nil [121792 124619]) ("ecb-update-after-partial-reparse" function (:arguments ("updated-tags")) nil [124622 127088]) ("ecb-semantic-active-for-file" function (:arguments ("filename")) nil [127091 127387]) ("ecb-update-methods-after-saving" function nil nil [127390 128144]) ("ecb-method-buffer-needs-rebuild" variable (:default-value t) nil [128147 128336]) ("ecb-update-methods-buffer--internal" function (:arguments ("&optional" "scroll-to-top" "rebuild-non-semantic")) nil [128339 131615]) ("ecb-tag-tree-cache" variable nil nil [131618 131901]) ("setq" code nil nil [131902 131931]) ("ecb-clear-tag-tree-cache" function (:arguments ("&optional" "source-file-name")) nil [131933 132283]) ("ecb-current-post-processed-tag-table" variable nil nil [132285 132547]) ("make-variable-buffer-local" code nil nil [132548 132614]) ("ecb-get-current-tag-table" function nil nil [132616 132953]) ("ecb-set-current-tag-table" function (:arguments ("table")) nil [132955 133131]) ("ecb-methods-get-data-store" function (:arguments ("key")) nil [133134 133366]) ("ecb-rebuild-methods-buffer-with-tagcache" function (:arguments ("updated-cache" "&optional" "no-update-semantic" "force-nil-cache" "non-semantic-rebuild")) nil [133371 145348]) ("ecb-save-without-auto-update-methods" function nil nil [145350 145466]) ("ecb-rebuild-methods-buffer-for-non-semantic" function nil nil [145469 147299]) ("ecb-rebuild-methods-buffer-for-semantic" function nil nil [147302 147919]) ("ecb-rebuild-methods-buffer" function (:user-visible-flag t) nil [147922 149743]) ("ecb-auto-expand-tag-tree-old" variable (:default-value (quote expand-spec)) nil [149746 149796]) ("ecb-toggle-auto-expand-tag-tree" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [149798 151134]) ("ecb-get-real-curr-tag" function nil nil [151359 152394]) ("ecb-try-highlight-tag" function (:arguments ("highlight-tag" "curr-tag" "table")) nil [152396 158496]) ("ecb-tag-sync-do-nothing" variable nil nil [158498 158605]) ("ecb-tag-sync" function (:arguments ("&optional" "force")) nil [158751 164078]) ("ecb-find-file-and-display" function (:arguments ("filename" "other-edit-window")) nil [164084 164552]) ("ecb-string-make-singular" function (:arguments ("string")) nil [164555 164708]) ("ecb-methods-node-get-semantic-type" function (:arguments ("node")) nil [164711 165018]) ("ecb-expand-methods-nodes" function (:user-visible-flag t :arguments ("&optional" "force-all")) nil [165021 167650]) ("ecb-expand-methods-node-internal" function (:arguments ("node" "level" "&optional" "force-all" "resync-tag" "update-tree-buffer")) nil [167652 170555]) ("ecb-normalize-expand-spec" function (:arguments ("spec")) nil [170559 170843]) ("ecb-semantic-tag-external-class-default" function (:arguments ("tag")) nil [170986 171515]) ("silentcomp-defvar" code nil nil [171553 171607]) ("ecb-semanticdb-get-type-definition-list" function (:arguments ("typename" "&optional" "search-system-dbs")) nil [171704 174885]) ("ecb-semanticdb-get-type-definition" function (:arguments ("typename" "&optional" "search-system-dbs")) nil [174887 175740]) ("ecb-method-clicked" function (:arguments ("node" "ecb-button" "edit-window-nr" "shift-mode" "meta-mode" "&optional" "no-post-action" "additional-post-action-list")) nil [176490 181852]) ("ecb-tag-visit-smart-tag-start" function (:arguments ("tag")) nil [181895 183112]) ("ecb-start-of-tag-doc" function (:arguments ("tag")) nil [183115 183668]) ("ecb-tag-visit-display-doc-start" function (:arguments ("tag")) nil [183671 184843]) ("defalias" code nil nil [184875 184948]) ("ecb-unhighlight-hook-called" variable nil nil [184950 185143]) ("ecb-unhighlight-tag-header" function nil nil [185146 185546]) ("ecb-tag-visit-highlight-tag-header" function (:arguments ("tag")) nil [185549 186035]) ("ecb-jump-to-tag" function (:arguments ("filename" "tag" "&optional" "window" "no-tag-visit-post-actions" "additional-post-action-list")) nil [186038 189366]) ("ecb-mouse-over-method-node" function (:arguments ("node" "&optional" "window" "no-message" "click-force")) nil [189369 190512]) ("ecb-call-tag-visit-function" function (:arguments ("tag" "fcn")) nil [190559 191228]) ("ecb-tag-visit-narrow-tag" function (:arguments ("tag")) nil [191230 191722]) ("ecb-tag-visit-recenter" function (:arguments ("tag")) nil [191725 192205]) ("ecb-tag-visit-recenter-top" function (:arguments ("tag")) nil [192207 192666]) ("tree-buffer-defpopup-command" code nil nil [192668 192962]) ("tree-buffer-defpopup-command" code nil nil [192965 193112]) ("if" code nil nil [193115 193366]) ("ecb-methods-menu-activate-hs" function nil nil [193368 193813]) ("tree-buffer-defpopup-command" code nil nil [193816 194504]) ("tree-buffer-defpopup-command" code nil nil [194507 195060]) ("tree-buffer-defpopup-command" code nil nil [195063 195241]) ("tree-buffer-defpopup-command" code nil nil [195243 195441]) ("tree-buffer-defpopup-command" code nil nil [195443 195614]) ("tree-buffer-defpopup-command" code nil nil [195616 195825]) ("tree-buffer-defpopup-command" code nil nil [195827 195998]) ("tree-buffer-defpopup-command" code nil nil [196000 196209]) ("tree-buffer-defpopup-command" code nil nil [196211 196382]) ("tree-buffer-defpopup-command" code nil nil [196384 196593]) ("tree-buffer-defpopup-command" code nil nil [196595 196792]) ("tree-buffer-defpopup-command" code nil nil [196794 197022]) ("ecb-common-methods-menu" variable nil nil [197025 197103]) ("setq" code nil nil [197106 198002]) ("ecb-methods-tag-menu" variable nil nil [198005 198038]) ("setq" code nil nil [198039 198472]) ("ecb-methods-menu-title-creator" variable (:default-value (function (lambda (node) (let ((data (tree-node->data node))) (if (and data (/= ecb-methods-nodetype-bucket (tree-node->type node))) (typecase data (ecb--semantic-tag (ecb--semantic-tag-name data)) (string data) (otherwise (tree-node->name node))) (tree-node->name node)))))) nil [198475 199042]) ("dotimes" code nil nil [199044 199299]) ("ecb-methods-menu-editwin-entries" function nil nil [199301 199991]) ("ecb-methods-menu-tagfilter-entries" function nil nil [199994 206705]) ("ecb-methods-menu-creator" function (:arguments ("tree-buffer-name" "node")) nil [206711 208395]) ("ecb-methods-incr-searchpattern-node-prefix" variable (:constant-flag t :default-value (quote ("\\([-+#(]\\|[^-+#(][^ 
]+ \\)?" . 1))) nil [208397 208870]) ("ecb-compare-methods-buffer-node-data" function (:arguments ("l" "r")) nil [209400 209754]) ("ecb-methods-node-mouse-highlighted-p" function (:arguments ("node")) nil [209756 210107]) ("defecb-tree-buffer-creator" code nil nil [210109 212637]) ("ecb-dump-semantic-toplevel" function (:user-visible-flag t) nil [212640 213117]) ("ecb-dump-semantic-tags-internal" function (:arguments ("table" "parent" "source-buffer" "indent")) nil [213119 214057]) ("silentcomp-provide" code nil nil [214059 214099]))
    :file "ecb-method-browser.el"
    :pointmax 214137
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ecb-jde.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [1627 1648]) ("silentcomp-defun" code nil nil [1651 1691]) ("silentcomp-defvar" code nil nil [1692 1754]) ("silentcomp-defun" code nil nil [1755 1798]) ("silentcomp-defun" code nil nil [1799 1850]) ("silentcomp-defun" code nil nil [1851 1896]) ("silentcomp-defun" code nil nil [1897 1945]) ("silentcomp-defun" code nil nil [1946 1993]) ("silentcomp-defun" code nil nil [1994 2033]) ("silentcomp-defvar" code nil nil [2034 2068]) ("ecb-util" include nil nil [2070 2089]) ("ecb-layout" include nil nil [2090 2111]) ("ecb-file-browser" include nil nil [2112 2139]) ("ecb-method-browser" include nil nil [2140 2169]) ("defgroup" code nil nil [2172 2306]) ("ecb-jde-set-directories-buffer-to-jde-sourcepath" variable (:user-visible-flag t) nil [2309 2587]) ("ecb-jde-display-class-at-point" function (:user-visible-flag t) nil [2589 5316]) ("ecb-jde-show-class-source" function (:arguments ("unqual-class")) nil [5319 5605]) ("ecb-jde-open-class-at-point-ff-function" function (:arguments ("filename" "&optional" "wildcards")) nil [5608 6124]) ("ecb-jde-gen-class-buffer" function (:arguments ("dir" "filename")) nil [6127 6442]) ("ecb-jde-get-source-path" function nil nil [6445 6525]) ("ecb-jde-update-ecb-source-paths" function nil nil [6527 6943]) ("when" code nil nil [6946 7372]) ("silentcomp-provide" code nil nil [7374 7403]))
    :file "ecb-jde.el"
    :pointmax 7430
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ecb-layout.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [5829 5850]) ("ecb-util" include nil nil [5853 5872]) ("ecb-speedbar" include nil nil [5873 5896]) ("ecb-compilation" include nil nil [5897 5923]) ("ecb-create-layout" include nil nil [5924 5952]) ("silentcomp-defvar" code nil nil [5964 6004]) ("silentcomp-defun" code nil nil [6005 6047]) ("silentcomp-defvar" code nil nil [6048 6095]) ("silentcomp-defvar" code nil nil [6096 6137]) ("silentcomp-defvar" code nil nil [6138 6179]) ("silentcomp-defun" code nil nil [6180 6231]) ("silentcomp-defvar" code nil nil [6232 6264]) ("silentcomp-defun" code nil nil [6265 6297]) ("silentcomp-defun" code nil nil [6340 6380]) ("silentcomp-defun" code nil nil [6381 6419]) ("silentcomp-defun" code nil nil [6420 6461]) ("silentcomp-defun" code nil nil [6462 6497]) ("silentcomp-defun" code nil nil [6498 6531]) ("silentcomp-defun" code nil nil [6532 6568]) ("silentcomp-defun" code nil nil [6569 6606]) ("silentcomp-defun" code nil nil [6607 6639]) ("silentcomp-defun" code nil nil [6640 6680]) ("silentcomp-defun" code nil nil [6681 6717]) ("silentcomp-defun" code nil nil [6718 6755]) ("silentcomp-defun" code nil nil [6756 6794]) ("silentcomp-defun" code nil nil [6795 6827]) ("silentcomp-defun" code nil nil [6828 6872]) ("silentcomp-defun" code nil nil [6873 6910]) ("silentcomp-defvar" code nil nil [6911 6956]) ("silentcomp-defvar" code nil nil [6967 7002]) ("silentcomp-defvar" code nil nil [7029 7066]) ("silentcomp-defun" code nil nil [7067 7106]) ("silentcomp-defvar" code nil nil [7107 7150]) ("silentcomp-defun" code nil nil [7151 7193]) ("silentcomp-defvar" code nil nil [7207 7245]) ("cl" include nil nil [7297 7310]) ("ecb-layouts-reload-needed" variable (:default-value t) nil [7313 7349]) ("ecb-load-layouts" function nil nil [7350 7606]) ("defgroup" code nil nil [7608 7726]) ("defgroup" code nil nil [7728 7840]) ("ecb-layout-option-set-function" variable (:constant-flag t :default-value (function (lambda (symbol value) (set symbol value) (when (and (boundp (quote ecb-minor-mode)) ecb-minor-mode (frame-live-p ecb-frame)) (let ((curr-frame (selected-frame))) (unwind-protect (progn (select-frame ecb-frame) (ecb-redraw-layout-full)) (select-frame curr-frame))))))) nil [7843 8520]) ("ecb-select-edit-window-on-redraw" variable (:user-visible-flag t) nil [8543 8687]) ("ecb-new-ecb-frame" variable (:user-visible-flag t) nil [8689 8840]) ("ecb-activate-before-new-frame-created-hook" variable (:user-visible-flag t) nil [8842 9085]) ("ecb-last-selected-layout" variable nil nil [9087 9209]) ("ecb-layout-name" variable (:user-visible-flag t :default-value "left8") nil [9211 10857]) ("ecb-enable-temp-buffer-shrink-to-fit" function (:arguments ("arg")) nil [10859 12453]) ("ecb-compile-window-height" variable (:user-visible-flag t) nil [12455 15799]) ("ecb-compile-window-width" variable (:user-visible-flag t :default-value (quote frame)) nil [15803 18731]) ("ecb-change-layout-preserves-compwin-state" variable (:user-visible-flag t :default-value t) nil [18733 19059]) ("ecb-compile-window-temporally-enlarge" variable (:user-visible-flag t :default-value (quote after-display)) nil [19061 20527]) ("ecb-maximize-ecb-window-after-selection" variable (:user-visible-flag t) nil [20529 20980]) ("ecb-maximize-next-after-maximized-select" variable (:user-visible-flag t) nil [21129 23405]) ("ecb-compile-window-prevent-shrink-below-height" variable (:user-visible-flag t :default-value t) nil [23773 24339]) ("ecb-enlarged-compilation-window-max-height" variable (:user-visible-flag t :default-value (quote best)) nil [24342 25568]) ("ecb-scroll-other-window-scrolls-compile-window" variable (:user-visible-flag t) nil [25570 25866]) ("ecb-ignore-special-display" variable (:user-visible-flag t :default-value (quote compile-window)) nil [25868 26720]) ("ecb-ignore-special-display" function nil nil [26722 26912]) ("ecb-ignore-display-buffer-function" variable (:user-visible-flag t :default-value (quote always)) nil [26914 28080]) ("ecb-ignore-display-buffer-function" function nil nil [28082 28296]) ("ecb-split-edit-window-after-start" variable (:user-visible-flag t :default-value (quote before-deactivation)) nil [28298 31043]) ("ecb-windows-width" variable (:user-visible-flag t :default-value 0.33) nil [31045 31344]) ("ecb-windows-height" variable (:user-visible-flag t :default-value 0.33) nil [31346 31634]) ("ecb-fix-window-size" variable (:user-visible-flag t) nil [31637 34211]) ("ecb-get-window-fix-type" function (:arguments ("layout-name")) nil [34213 34628]) ("ecb-set-window-size-fixed" function (:arguments ("fix")) nil [34630 35135]) ("ecb-do-with-unfixed-ecb-buffers" function (:arguments ("&rest" "body")) nil [35137 35663]) ("ecb-other-window-behavior" variable (:user-visible-flag t :default-value (quote smart)) nil [35667 39769]) ("ecb-advice-window-functions" variable (:user-visible-flag t :default-value (quote (other-window delete-window delete-other-windows delete-windows-on split-window-horizontally split-window-vertically split-window switch-to-buffer switch-to-buffer-other-window display-buffer other-window-for-scrolling balance-windows))) nil [39771 45041]) ("ecb-advice-window-functions-signal-error" variable (:user-visible-flag t) nil [45043 45843]) ("ecb-layout-always-operate-in-edit-window" variable (:user-visible-flag t :default-value (quote (switch-to-buffer))) nil [45845 47825]) ("ecb-canonical-ecb-windows-list" function (:arguments ("&optional" "winlist")) nil [47827 48502]) ("ecb-canonical-edit-windows-list" function (:arguments ("&optional" "winlist")) nil [48504 49530]) ("ecb-layout-window-sizes" variable (:user-visible-flag t) nil [49532 51567]) ("ecb-redraw-layout-quickly" variable nil nil [51569 51779]) ("ecb-toggle-layout-sequence" variable (:user-visible-flag t :default-value (quote ("left9" "left14"))) nil [51781 53668]) ("ecb-hide-ecb-windows-before-hook" variable (:user-visible-flag t) nil [53670 54278]) ("ecb-hide-ecb-windows-after-hook" variable (:user-visible-flag t) nil [54280 54793]) ("ecb-show-ecb-windows-before-hook" variable (:user-visible-flag t) nil [54795 55639]) ("ecb-show-ecb-windows-after-hook" variable (:user-visible-flag t) nil [55641 56493]) ("ecb-redraw-layout-after-hook" variable (:user-visible-flag t :default-value (quote (ecb-eshell-recenter))) nil [56495 56759]) ("ecb-redraw-layout-before-hook" variable (:user-visible-flag t) nil [56761 56902]) ("ecb-layout-debug-mode" variable (:user-visible-flag t) nil [56904 57696]) ("ecb-frame" variable nil nil [57766 57968]) ("ecb-edit-window" variable nil nil [57970 58120]) ("ecb-last-edit-window-with-point" variable nil nil [58122 58246]) ("ecb-last-source-buffer" variable nil nil [58248 58343]) ("ecb-last-compile-buffer-in-compile-window" variable nil nil [58345 58469]) ("ecb-compile-window" variable nil nil [58471 58543]) ("ecb-compile-window-height-lines" variable nil nil [59001 59340]) ("ecb-compile-window-was-selected-before-command" variable nil nil [59342 59487]) ("ecb-layout-default-window-sizes" variable nil nil [59489 59674]) ("ecb-windows-hidden" variable nil nil [59676 59812]) ("ecb-special-ecb-buffers-of-current-layout" variable nil nil [59814 59923]) ("ecb-ecb-buffer-name-selected-before-command" variable nil nil [59925 60130]) ("ecb-layout-prevent-handle-ecb-window-selection" variable nil nil [60132 60265]) ("ecb-initialize-layout" function nil nil [60267 61024]) ("ecb-layout-debug-error" function (:arguments ("&rest" "args")) nil [61026 61344]) ("ecb-compile-window-live-p" function (:arguments ("&optional" "display-msg")) nil [61347 61832]) ("ecb-get-compile-window-buffer" function nil nil [61834 62062]) ("ecb-edit-window-live-p" function nil nil [62203 62286]) ("ecb-window-live-p" function (:arguments ("buffer-name")) nil [62288 62470]) ("delete-frame" function (:arguments ("around" "ecb")) nil [62703 63368]) ("compile" include nil nil [63370 63388]) ("compilation-set-window-height" function (:arguments ("around" "ecb")) nil [64113 66925]) ("scroll-other-window" function (:arguments ("around" "ecb")) nil [67089 68068]) ("scroll-all-mode" function (:arguments ("after" "ecb")) nil [69003 69522]) ("count-windows" function (:arguments ("around" "ecb")) nil [69524 70254]) ("walk-windows" function (:arguments ("around" "ecb")) nil [70256 71569]) ("one-window-p" function (:arguments ("around" "ecb")) nil [71571 72161]) ("ecb-toggle-scroll-other-window-scrolls-compile" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [73686 74478]) ("ecb-edit-window-splitted" function (:arguments ("&optional" "edit-windows-list")) nil [74490 75461]) ("ecb-temp-buffer-shrink-to-fit" variable nil nil [75463 75675]) ("when-ecb-running-xemacs" code nil nil [75677 83507]) ("when-ecb-running-emacs" code nil nil [83541 92806]) ("ecb-display-buffer-xemacs" function (:user-visible-flag t :arguments ("buffer" "&optional" "not-this-window-p" "override-frame" "shrink-to-fit")) nil [93478 111447]) ("ecb-temp-buffer-show-function-emacs" function (:arguments ("buf")) nil [111449 113031]) ("ecb-temp-buffer-show-function-old" variable nil nil [113033 113079]) ("ecb-enable-own-temp-buffer-show-function" function (:arguments ("arg")) nil [113081 113701]) ("ecb-adviceable-functions" variable (:constant-flag t :default-value (quote (other-window split-window-vertically split-window-horizontally split-window delete-window delete-other-windows delete-windows-on switch-to-buffer switch-to-buffer-other-window display-buffer other-window-for-scrolling balance-windows))) nil [113776 114164]) ("ecb-activate-adviced-functions" function (:arguments ("functions")) nil [114180 114657]) ("ecb-with-original-functions" function (:arguments ("&rest" "body")) nil [114659 115156]) ("ecb-with-adviced-functions" function (:arguments ("&rest" "body")) nil [115158 115684]) ("ecb-with-some-adviced-functions" function (:arguments ("functions" "&rest" "body")) nil [115686 116248]) ("put" code nil nil [116250 116312]) ("ecb-permanent-adviced-functions" variable (:constant-flag t :default-value (quote ((split-window . before) (delete-window . before) (delete-other-windows . before)))) nil [116314 116528]) ("ecb-with-original-permanent-functions" function (:arguments ("&rest" "body")) nil [116614 117154]) ("ecb-where-is-point" function (:arguments ("&optional" "edit-windows-list")) nil [117157 118043]) ("ecb-point-in-edit-window" function (:arguments ("&optional" "edit-windows-list")) nil [118045 118917]) ("ecb-get-edit-window-by-number" function (:arguments ("edit-win-nr" "&optional" "edit-win-list")) nil [118919 119338]) ("ecb-point-in-compile-window" function nil nil [119340 119569]) ("ecb-point-in-ecb-tree-buffer" function nil nil [119572 120114]) ("ecb-point-in-dedicated-special-buffer" function nil nil [120363 120881]) ("ecb-buffer-is-dedicated-special-buffer-p" function (:arguments ("buffer-or-name")) nil [120893 121208]) ("ecb-goto-ecb-window" function (:arguments ("ecb-buffer-name")) nil [121211 122491]) ("ecb-goto-window-edit-last" function (:user-visible-flag t) nil [122493 122853]) ("ecb-goto-window-edit1" function (:user-visible-flag t) nil [122855 123076]) ("ecb-goto-window-edit2" function (:user-visible-flag t) nil [123078 123313]) ("ecb-goto-window-compilation" function (:user-visible-flag t) nil [123315 123610]) ("ecb-select-ecb-frame" function (:user-visible-flag t) nil [123613 123889]) ("ecb-select-edit-window" function (:arguments ("&optional" "edit-window-number")) nil [123891 125341]) ("ecb-layout-pre-command-hook" function nil nil [125606 127078]) ("ecb-layout-prevent-handle-compile-window-selection" variable nil nil [127087 127150]) ("ecb-last-edit-area-creators" variable nil nil [127151 127191]) ("ecb-layout-post-command-hook" function nil nil [127192 131449]) ("ecb-check-for-special-buffer" function (:arguments ("buffer-or-name")) nil [132084 133530]) ("ecb-check-for-same-window-buffer" function (:arguments ("buffer-or-name")) nil [133536 134631]) ("ecb-layout-temporary-dedicated-windows" variable nil nil [134634 134924]) ("display-buffer" function (:arguments ("around" "ecb")) nil [135484 149881]) ("ecb-get-other-window-minibuf-active" function (:arguments ("win-list" "edit-win-list" "ecb-win-list" "comp-win" "minibuf-win" "point-loc" "nth-window")) nil [149884 151272]) ("ecb-get-other-window-smart" function (:arguments ("win-list" "edit-win-list" "ecb-win-list" "comp-win" "minibuf-win" "point-loc" "nth-window")) nil [151278 153457]) ("ecb-get-other-window" function (:arguments ("nth-window")) nil [153459 157117]) ("other-window" function (:arguments ("around" "ecb")) nil [157119 157676]) ("delete-windows-on" function (:arguments ("around" "ecb")) nil [157679 160253]) ("ecb-edit-area-creators" variable nil nil [160255 160290]) ("ecb-edit-area-creators-init" function nil nil [160292 160369]) ("ecb-edit-area-creators-add" function (:arguments ("creator")) nil [160371 160497]) ("ecb-restore-edit-area" function nil nil [160499 160714]) ("ecb-edit-area-creators-number-of-edit-windows" function nil nil [160716 161238]) ("delete-window" function (:arguments ("before" "ecb")) nil [161271 162899]) ("delete-window" function (:arguments ("around" "ecb")) nil [162901 166291]) ("delete-other-windows" function (:arguments ("before" "ecb")) nil [166293 167677]) ("delete-other-windows" function (:arguments ("around" "ecb")) nil [167679 171066]) ("split-window-horizontally" function (:arguments ("around" "ecb")) nil [171083 172015]) ("split-window-vertically" function (:arguments ("around" "ecb")) nil [172017 172801]) ("split-window" function (:arguments ("before" "ecb")) nil [172803 174297]) ("split-window" function (:arguments ("around" "ecb")) nil [174306 176038]) ("switch-to-buffer-other-window" function (:arguments ("around" "ecb")) nil [176040 177707]) ("switch-to-buffer" function (:arguments ("around" "ecb")) nil [177987 180964]) ("other-window-for-scrolling" function (:arguments ("around" "ecb")) nil [180966 182290]) ("balance-windows" function (:arguments ("around" "ecb")) nil [182292 182467]) ("ecb-switch-to-buffer" function (:user-visible-flag t) nil [182532 182849]) ("ecb-switch-to-buffer-other-window" function (:user-visible-flag t) nil [182851 183207]) ("ecb-other-window" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [183209 183527]) ("ecb-delete-other-windows" function (:user-visible-flag t) nil [183529 183858]) ("ecb-delete-window" function (:user-visible-flag t) nil [183860 184168]) ("ecb-delete-windows-on" function (:user-visible-flag t) nil [184170 184490]) ("ecb-split-window-vertically" function (:user-visible-flag t) nil [184492 184830]) ("ecb-split-window-horizontally" function (:user-visible-flag t) nil [184832 185176]) ("ecb-split-window" function (:user-visible-flag t) nil [185178 185483]) ("ecb-display-buffer" function (:user-visible-flag t) nil [185485 185796]) ("ecb-balance-windows" function (:user-visible-flag t) nil [185798 186114]) ("ecb-split-hor" function (:arguments ("amount" "&optional" "dont-switch-window" "use-frame")) nil [186191 186762]) ("ecb-split-hor-abs" function (:arguments ("amount" "&optional" "dont-switch-window")) nil [186764 186932]) ("ecb-split-ver" function (:arguments ("amount" "&optional" "dont-switch-window" "use-frame")) nil [186934 187508]) ("ecb-split-ver-abs" function (:arguments ("amount" "&optional" "dont-switch-window")) nil [187510 187676]) ("ecb-buffer-setfunction-registration" variable nil nil [187903 188808]) ("ecb-dedicated-special-buffers" function nil nil [188810 189555]) ("ecb-get-current-visible-ecb-buffers" function nil nil [189557 189959]) ("ecb-buffer-is-visible-ecb-buffer-p" function (:arguments ("buffer-or-name")) nil [189961 190282]) ("ecb-buffer-is-ecb-buffer-of-current-layout-p" function (:arguments ("buffer-or-name")) nil [190284 190728]) ("ecb-buffer-is-the-only-visible-ecb-buffer-p" function (:arguments ("buffer-or-name")) nil [190730 191091]) ("ecb-set-minor-mode-text" function nil nil [191093 191351]) ("ecb-toggle-ecb-windows" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [191668 193560]) ("ecb-hide-ecb-windows" function (:user-visible-flag t) nil [193562 193686]) ("ecb-show-ecb-windows" function (:user-visible-flag t) nil [193688 193798]) ("ecb-current-maximized-ecb-buffer-name" variable nil nil [193801 194104]) ("ecb-redraw-layout-preserving-compwin-state" function (:user-visible-flag t) nil [194106 194391]) ("ecb-toggle-maximize-ecb-window-with-mouse" function (:user-visible-flag t) nil [194393 194556]) ("ecb-toggle-maximize-ecb-window" function (:arguments ("&optional" "ecb-buffer-name")) nil [194558 195277]) ("ecb-undo-maximize-ecb-buffer" function (:arguments ("&optional" "preserve-selected-window")) nil [195279 196126]) ("ecb-maximized-tree-buffer-name" function nil nil [196128 196286]) ("ecb-buffer-is-maximized-p" function (:arguments ("&optional" "ecb-buffer-name")) nil [196288 196841]) ("ecb-maximize-ecb-buffer" function (:arguments ("ecb-buffer-name" "&optional" "preserve-selected-window")) nil [196843 198556]) ("ecb-cycle-ecb-buffer-state" variable nil nil [198558 198880]) ("ecb-cycle-maximized-ecb-buffers" function (:user-visible-flag t) nil [198882 200052]) ("ecb-window-configuration-data" function nil nil [200055 202025]) ("ecb-with-dedicated-window" function (:arguments ("&rest" "body")) nil [202103 202530]) ("defecb-window-dedicator" function (:arguments ("creator" "buffer-name" "docstring" "&rest" "body")) nil [202532 203571]) ("put" code nil nil [203573 203627]) ("defecb-window-dedicator" code nil nil [203629 203808]) ("defecb-window-dedicator" code nil nil [203810 204435]) ("ecb-delete-window-ecb-windows-left" function (:arguments ("window" "edit-win-list")) nil [204912 205731]) ("defalias" code nil nil [205733 205823]) ("ecb-delete-window-ecb-windows-right" function (:arguments ("window" "edit-win-list")) nil [205862 205953]) ("ecb-delete-window-ecb-windows-top" function (:arguments ("window" "edit-win-list")) nil [205985 206477]) ("ecb-layout-types" variable (:constant-flag t :default-value (quote (left right top left-right))) nil [206480 206536]) ("ecb-layout-type-p" function (:arguments ("type" "&optional" "err")) nil [206538 206740]) ("ecb-available-layouts" variable nil nil [206742 207033]) ("ecb-available-layouts-of-type" function (:arguments ("type")) nil [207077 207593]) ("ecb-available-layouts-member-p" function (:arguments ("layout-name")) nil [207595 207801]) ("ecb-available-layouts-add" function (:arguments ("name" "type")) nil [207803 208198]) ("ecb-available-layouts-remove" function (:arguments ("name")) nil [208200 208563]) ("ecb-get-layout-type" function (:arguments ("name")) nil [208565 208678]) ("ecb-layout-define" function (:arguments ("name" "type" "doc" "&rest" "create-code")) nil [208719 214974]) ("put" code nil nil [215145 215193]) ("ecb-layout-undefine" function (:arguments ("name")) nil [215195 215572]) ("ecb-choose-layout-name" function (:arguments ("layout-list" "require-match")) nil [215575 216144]) ("ecb-layout-switch" function (:arguments ("name")) nil [216146 216467]) ("ecb-change-layout" function (:user-visible-flag t :arguments ("&optional" "preselect-type")) nil [216472 217417]) ("ecb-show-layout-help" function (:user-visible-flag t) nil [217419 217920]) ("ecb-window-config-cache-size" variable (:default-value 200) nil [218015 218056]) ("ecb-window-config-cache" variable nil nil [218057 218287]) ("ecb-window-config-cache-add" function (:arguments ("ecb-window-config")) nil [218289 218656]) ("ecb-window-config-cache-get" function (:arguments ("emacs-window-config")) nil [218658 219144]) ("ecb-window-config-cache-get-latest" function nil nil [219146 219387]) ("ecb-window-config-cache-init" function nil nil [219389 219668]) ("ecb-window-config-cache-clear" function nil nil [219670 219768]) ("ecb-window-configuration-invalidp" function (:arguments ("window-config")) nil [219806 220231]) ("current-window-configuration" function (:arguments ("after" "ecb")) nil [220247 221906]) ("set-window-configuration" function (:arguments ("after" "ecb")) nil [221909 223505]) ("ecb-current-window-configuration" function nil nil [223507 223684]) ("ecb-set-window-configuration" function (:arguments ("ecb-window-config")) nil [223686 223959]) ("ecb-save-window-excursion" function (:arguments ("&rest" "body")) nil [223961 224345]) ("ecb-redraw-layout" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [225555 228446]) ("ecb-repair-only-ecb-window-layout" function nil nil [228449 232337]) ("ecb-draw-compile-window" function (:arguments ("&optional" "height")) nil [232365 233584]) ("ecb-redraw-layout-full" function (:arguments ("&optional" "no-buffer-sync" "ecb-windows-creator" "window-configuration-data" "no-ecb-windows" "emergency")) nil [233698 247329]) ("ecb-redraw-layout-quickly" function nil nil [247336 247718]) ("ecb-toggle-layout-state" variable nil nil [247721 247816]) ("ecb-toggle-layout" function (:user-visible-flag t :arguments ("&optional" "last-one")) nil [247817 249025]) ("ecb-store-window-sizes" function (:user-visible-flag t :arguments ("&optional" "fix")) nil [249027 250909]) ("ecb-restore-window-sizes" function (:user-visible-flag t) nil [250912 251215]) ("ecb-restore-default-window-sizes" function (:user-visible-flag t) nil [251217 251565]) ("ecb-get-window-size" function (:arguments ("window" "&optional" "fix" "ref-size")) nil [251706 252731]) ("ecb-get-ecb-window-sizes" function (:arguments ("&optional" "fix")) nil [252734 253636]) ("ecb-set-window-size" function (:arguments ("window" "size" "&optional" "ref-size")) nil [253763 255536]) ("ecb-set-ecb-window-sizes" function (:arguments ("window-sizes")) nil [255538 256924]) ("ecb-get-edit-area-size" function nil nil [257206 258553]) ("ecb-compile-window-specified-height-config" variable nil nil [260281 260574]) ("ecb-use-window-config-for-compwin-shrink" variable nil nil [260750 260803]) ("ecb-store-compile-window-specified-height-config" function nil nil [260805 261445]) ("ecb-reset-compile-window-specified-height-config" function nil nil [261624 262255]) ("defalias" code nil nil [262287 262373]) ("ecb-toggle-compile-window-height" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [262375 269227]) ("ecb-set-compile-window-height" function nil nil [269871 270774]) ("ecb-compile-window-state" function nil nil [270777 271170]) ("ecb-toggle-compile-window" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [271172 273691]) ("silentcomp-provide" code nil nil [273694 273726]))
    :file "ecb-layout.el"
    :pointmax 273914
    :unmatched-syntax 'nil
    )
   (semanticdb-table "ecb-create-layout.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [1585 1606]) ("cl" include nil nil [1659 1672]) ("ecb-mode-line" include nil nil [1675 1699]) ("ecb-util" include nil nil [1700 1719]) ("ecb-compilation" include nil nil [1720 1746]) ("silentcomp-defvar" code nil nil [1764 1804]) ("silentcomp-defvar" code nil nil [1805 1837]) ("silentcomp-defvar" code nil nil [1858 1898]) ("silentcomp-defvar" code nil nil [1899 1941]) ("silentcomp-defvar" code nil nil [1942 1988]) ("silentcomp-defvar" code nil nil [2026 2065]) ("defgroup" code nil nil [2067 2194]) ("ecb-create-layout-file" variable (:user-visible-flag t :default-value "~/.ecb-user-layouts.el") nil [2196 2372]) ("ecb-create-layout-frame-width" variable (:user-visible-flag t :default-value 110) nil [2374 2511]) ("ecb-create-layout-frame-height" variable (:user-visible-flag t :default-value 42) nil [2513 2651]) ("ecb-create-layout-buf-prefix" variable (:constant-flag t :default-value " *ECB-LC-") nil [2684 2735]) ("ecb-create-layout-frame-name" variable (:constant-flag t :default-value "Creation of a new ECB-layout") nil [2736 2806]) ("ecb-create-layout-all-buf-types" variable (:constant-flag t :default-value (quote ("directories" "history" "methods" "sources" "speedbar" "analyse"))) nil [2807 2919]) ("ecb-create-layout-help-text-left-right" variable (:constant-flag t :default-value "
 ECB layout creation mode
 ========================

 This is the help-screen of this mode. The window
 displaying this help text is called the edit-window
 which is neither selectable nor delete-able nor
 split-able in this mode.

 <left/right/up/down-arrow>: Moving around in current
 window C-n, C-p: Go to next/previous window (beside
 the edit-window)

 C-s: Split current window. You will be asked:
      - If \"vertical\" or \"horizontal\" split
      - How to split: \"at-point\", \"half\" or
        \"other\" (i.e. you can specify any fraction
        between 0.1 and 0.9)
      - Which type the current window should be
        (see description of C-t below).
 C-u: Unsplit, ie. delete current window
 C-t: Give the current window a built-in type
      (\"directories\", \"sources\", \"methods\",
      \"history\" etc.) or any arbitrary user-defined
      type (\"other\"). See the Online-manual!

 C-c: Cancel layout creation. This does not save the
      layout. Deletes this frame.
 C-q: Save current defined layout and quit the layout
      creation. You will be asked for a layout-name.
      With TAB-completion you can get the names already
      in use. You have to choose a new name!
      Deletes this frame.

 There are NO other commands or keys available. ALL
 other keys are disabled in this mode!
") nil [2921 4300]) ("ecb-create-layout-help-text-top" variable (:constant-flag t :default-value " ECB layout creation mode
 ========================

 This is the help-screen of this mode. The window displaying this help text is called
 the edit-window which is neither selectable nor delete-able nor split-able in this mode.

 <left/right/up/down-arrow>: Moving around in current window
 C-n, C-p: Go to next/previous window (beside the edit-window)

 C-s: Split current window. You will be asked:
      - If \"vertical\" or \"horizontal\" split
      - How to split: \"at-point\", \"half\" or \"other\" (i.e. you can specify any
        fraction between 0.1 and 0.9)
      - Which type the current window should be (see description of C-t below).
 C-u: Unsplit, ie. delete current window
 C-t: Give the current window a built-in type (\"directories\", \"sources\", \"methods\",
      \"history\" etc.) or any arbitrary user-defined type (\"other\").

 C-c: Cancel layout creation. This does not save the layout. Deletes this frame.
 C-q: Save current defined layout and quit the layout creation. You will be asked for a
      layout-name. With TAB-completion you can get the names already in use.
      You have to choose a new name! Deletes this frame.

 There are NO other commands or keys available. ALL other keys are disabled in this mode!
") nil [4302 5600]) ("ecb-create-layout-file-header" variable (:constant-flag t :default-value "

;; Copyright (C) 2001 - 2005 Jesper Nordenberg
;; Copyright (C) 2001 - 2005 Free Software Foundation, Inc.
;; Copyright (C) 2001 - 2005 Klaus Berndl <klaus.berndl@sdm.de>

;; Author: Klaus Berndl <klaus.berndl@sdm.de>
;; Maintainer: Klaus Berndl <klaus.berndl@sdm.de>
;; Keywords: java, class, browser

;; This program is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the Free
;; Software Foundation; either version 2, or (at your option) any later
;; version.

;; This program is distributed in the hope that it will be useful, but WITHOUT
;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
;; FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
;; more details.

;; You should have received a copy of the GNU General Public License along
;; with GNU Emacs; see the file COPYING. If not, write to the Free Software
;; Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

;;; Commentary:

;; This file contains all user-defined ECB-layouts created by the command
;; `ecb-create-new-layout'.

;; !!! DO NOT EDIT THIS FILE MANUALLY - IT IS GENERATED BY ECB !!!

") nil [5602 6857]) ("ecb-create-layout-frame" variable nil nil [6860 6896]) ("ecb-create-layout-edit-window" variable nil nil [6897 6939]) ("ecb-create-layout-old-global-map" variable nil nil [6941 6986]) ("ecb-create-layout-old-minor-mode-map-alist" variable nil nil [6987 7042]) ("ecb-create-layout-old-hscroll" variable nil nil [7043 7085]) ("ecb-create-layout-old-debug-on-error" variable nil nil [7086 7135]) ("ecb-create-layout-old-frame" variable nil nil [7136 7176]) ("ecb-create-layout-old-vertical-div-map" variable nil nil [7177 7228]) ("ecb-create-layout-old-modeline-map" variable nil nil [7229 7276]) ("ecb-create-layout-old-after-frame-h" variable nil nil [7277 7325]) ("ecb-create-layout-old-before-frame-h" variable nil nil [7326 7375]) ("ecb-create-layout-generated-lisp" variable nil nil [7377 7422]) ("ecb-create-layout-gen-counter" variable nil nil [7423 7463]) ("ecb-create-layout-buf-types" variable nil nil [7465 7505]) ("ecb-create-layout-type" variable (:default-value (quote left)) nil [7552 7589]) ("ecb-create-layout-initilize" function nil nil [7591 8334]) ("ecb-create-layout-frame-deleted" variable nil nil [8336 8380]) ("delete-frame" function (:arguments ("before" "ecb-create-layout")) nil [8382 8808]) ("delete-frame" function (:arguments ("after" "ecb-create-layout")) nil [8810 9158]) ("ecb-create-layout-frame-ok" function nil nil [9163 9403]) ("ecb-create-layout-cancel" function (:user-visible-flag t :arguments ("&rest" "ignore")) nil [9405 9723]) ("ecb-create-layout-clear-all" function (:arguments ("&optional" "delete-frame")) nil [9725 11721]) ("ecb-create-layout-save-and-quit" function (:user-visible-flag t :arguments ("&rest" "ignore")) nil [11723 12462]) ("ecb-create-layout-ready-for-save-p" function nil nil [12465 12850]) ("ecb-create-layout-insert-line" function (:arguments ("line")) nil [12853 13004]) ("ecb-create-layout-insert-file-header" function nil nil [13006 13221]) ("ecb-create-layout-save-layout" function nil nil [13223 15102]) ("ecb-create-layout-gen-lisp" function (:arguments ("lisp-statement")) nil [15104 15260]) ("ecb-create-layout-split-ver" function (:arguments ("&optional" "fraction")) nil [15262 15582]) ("ecb-create-layout-split-hor" function (:arguments ("&optional" "fraction")) nil [15584 15918]) ("ecb-create-layout-add-to-buf-types" function (:arguments ("type")) nil [15920 16207]) ("ecb-create-layout-remove-from-buf-type" function (:arguments ("type")) nil [16209 16397]) ("ecb-create-layout-buffer-type" function nil nil [16399 16497]) ("ecb-create-layout-buffer-factor" function nil nil [16499 16601]) ("ecb-create-layout-set-buffer-type" function (:arguments ("type")) nil [16603 16789]) ("ecb-create-layout-set-buffer-factor" function (:arguments ("factor")) nil [16791 16985]) ("ecb-create-layout-gen-lisp-for-buffer-type" function (:arguments ("type")) nil [16988 17240]) ("ecb-create-layout-set-buffer-to-type" function (:user-visible-flag t :arguments ("&optional" "type")) nil [17245 18476]) ("ecb-create-layout-select-edit-window" function nil nil [18478 18974]) ("ecb-create-layout-split" function (:user-visible-flag t) nil [18976 20596]) ("ecb-create-layout-forward-char" function (:user-visible-flag t) nil [20598 21038]) ("ecb-create-layout-next-window" function (:user-visible-flag t) nil [21040 21669]) ("ecb-create-layout-previous-window" function (:user-visible-flag t) nil [21671 22403]) ("ecb-create-layout-delete-window" function (:user-visible-flag t) nil [22405 24005]) ("ecb-create-layout-mode-map" variable nil nil [24007 24084]) ("if" code nil nil [24086 26287]) ("ecb-create-layout-new-buffer" function (:arguments ("&optional" "do-not-fill")) nil [26290 26831]) ("ecb-create-layout-mode" function nil nil [26835 27307]) ("ecb-create-layout-init-layout" function (:arguments ("&optional" "new")) nil [27309 28933]) ("ecb-create-layout-make-frame" function nil nil [28936 30570]) ("ecb-create-new-layout" function (:user-visible-flag t) nil [30745 32418]) ("ecb-delete-new-layout" function (:user-visible-flag t) nil [32421 34256]) ("ecb-create-layout-debug" function (:user-visible-flag t) nil [34258 34491]) ("ad-disable-advice" code nil nil [34758 34817]) ("ad-disable-advice" code nil nil [34818 34878]) ("ad-activate" code nil nil [34879 34906]) ("silentcomp-provide" code nil nil [34909 34948]))
    :file "ecb-create-layout.el"
    :pointmax 34975
    )
   (semanticdb-table "ecb-mode-line.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [1574 1595]) ("ecb-util" include nil nil [1598 1617]) ("ecb-face" include nil nil [1618 1637]) ("silentcomp-defun" code nil nil [1649 1683]) ("silentcomp-defun" code nil nil [1684 1714]) ("silentcomp-defun" code nil nil [1715 1749]) ("silentcomp-defun" code nil nil [1750 1788]) ("silentcomp-defun" code nil nil [1798 1839]) ("silentcomp-defun" code nil nil [1840 1869]) ("defgroup" code nil nil [1871 1994]) ("ecb-mode-line-prefixes" variable (:user-visible-flag t :default-value (quote ((ecb-directories-buffer-name) (ecb-sources-buffer-name . ecb-sources-filter-modeline-prefix) (ecb-methods-buffer-name . ecb-methods-filter-modeline-prefix) (ecb-history-buffer-name . ecb-history-filter-modeline-prefix)))) nil [1997 4758]) ("ecb-mode-line-display-window-number" variable (:user-visible-flag t :default-value t) nil [4764 5818]) ("ecb-mode-line-data" variable (:user-visible-flag t :default-value (quote ((ecb-directories-buffer-name . sel-dir) (ecb-sources-buffer-name . sel-dir) (ecb-methods-buffer-name . sel-source) (ecb-analyse-buffer-name . sel-source) (ecb-history-buffer-name . "History")))) nil [5824 8760]) ("ecb-mode-line-format" function nil nil [8763 13446]) ("ecb-mode-line-make-modeline-str" function (:arguments ("str" "face")) nil [13449 14195]) ("ecb-mode-line-set" function (:arguments ("buffer-name" "frame" "prefix" "&optional" "text" "no-win-nr")) nil [14214 16351]) ("ecb-mode-line-update-buffer" function (:arguments ("buffer-name" "new-mode-line-format")) nil [16355 16756]) ("silentcomp-provide" code nil nil [16758 16793]))
    :file "ecb-mode-line.el"
    :pointmax 16826
    )
   (semanticdb-table "ecb-help.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [1608 1629]) ("ecb-layout" include nil nil [1632 1653]) ("ecb-util" include nil nil [1654 1673]) ("silentcomp-defvar" code nil nil [1700 1743]) ("silentcomp-defun" code nil nil [1744 1773]) ("silentcomp-defvar" code nil nil [1786 1832]) ("silentcomp-defvar" code nil nil [1840 1871]) ("silentcomp-defun" code nil nil [1893 1924]) ("silentcomp-defun" code nil nil [1925 1953]) ("silentcomp-defun" code nil nil [1954 1999]) ("ecb-help-info-start-file" variable (:constant-flag t :default-value "ecb.info") nil [2001 2047]) ("ecb-help-html-start-file" variable (:constant-flag t :default-value "ecb.html") nil [2048 2094]) ("ecb-help-info-subdir" variable (:constant-flag t :default-value "./info-help/") nil [2095 2141]) ("ecb-help-html-subdir" variable (:constant-flag t :default-value "./html-help/") nil [2142 2188]) ("defgroup" code nil nil [2190 2264]) ("ecb-show-help-format" variable (:user-visible-flag t :default-value (quote info)) nil [2266 2847]) ("ecb-help-info-path" variable (:user-visible-flag t :default-value (concat (if ecb-running-xemacs (if (file-exists-p (concat ecb-ecb-dir ecb-help-info-subdir ecb-help-info-start-file)) ecb-help-info-subdir "../../info/") ecb-help-info-subdir) ecb-help-info-start-file)) nil [2850 4104]) ("ecb-help-html-path" variable (:user-visible-flag t :default-value (if (not ecb-running-xemacs) (concat ecb-help-html-subdir ecb-help-html-start-file) (cond ((file-exists-p (concat ecb-ecb-dir ecb-help-html-subdir ecb-help-html-start-file)) (concat ecb-help-html-subdir ecb-help-html-start-file)) ((file-exists-p (concat ecb-ecb-dir "../../html/" ecb-help-html-start-file)) (concat "../../html/" ecb-help-html-start-file)) ((file-exists-p (concat ecb-ecb-dir "../../html/ecb/index.html")) "../../html/ecb/index.html") (t (concat "../../etc/ecb/html/" ecb-help-html-start-file))))) nil [4106 5593]) ("ecb-info" function (:arguments ("info-file" "&optional" "no-file-not-exist-err")) nil [5596 6055]) ("ecb-browse-html-file" function (:arguments ("html-file" "&optional" "no-file-not-exist-err")) nil [6057 6960]) ("ecb-show-help" function (:user-visible-flag t :arguments ("&optional" "format")) nil [6977 9109]) ("ecb-problem-report-mail-address" variable (:default-value "ecb-list@lists.sourceforge.net") nil [9166 9240]) ("ecb-problem-report-message" variable (:constant-flag t :default-value "Please enter the details of your bug report here") nil [9242 9332]) ("ecb-submit-problem-report" function (:user-visible-flag t) nil [9334 11653]) ("ecb-problem-report-post-hook" function nil nil [11655 15657]) ("ecb-problem-report-list-all-variables" function nil nil [15660 20630]) ("silentcomp-provide" code nil nil [20633 20663]))
    :file "ecb-help.el"
    :pointmax 20690
    )
   (semanticdb-table "ecb-navigate.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [1532 1553]) ("eieio" include nil nil [1556 1572]) ("ecb-dlist-node" type (:members (("previous" variable (:default-value "nil") nil nil) ("next" variable (:default-value "nil") nil nil) ("data" variable (:default-value "nil") nil nil)) :type "class") nil [1690 1922]) ("ecb-dlist-node-new" function (:arguments ("data")) nil [1924 1994]) ("ecb-get-data" function (:parent "ecb-dlist-node" :arguments ("node")) nil [1996 2063]) ("ecb-get-next" function (:parent "ecb-dlist-node" :arguments ("node")) nil [2065 2132]) ("ecb-get-previous" function (:parent "ecb-dlist-node" :arguments ("node")) nil [2134 2209]) ("ecb-set-data" function (:parent "ecb-dlist-node" :arguments ("node" "data")) nil [2211 2288]) ("ecb-set-next" function (:parent "ecb-dlist-node" :arguments ("node" "next")) nil [2290 2547]) ("ecb-set-previous" function (:parent "ecb-dlist-node" :arguments ("node" "previous")) nil [2549 2838]) ("ecb-nav-history-item" type (:members (("pos" variable nil nil nil) ("window-start" variable nil nil nil)) :type "class") nil [2956 3132]) ("ecb-nav-set-pos" function (:parent "ecb-nav-history-item" :arguments ("item" "pos")) nil [3136 3219]) ("ecb-nav-set-window-start" function (:parent "ecb-nav-history-item" :arguments ("item" "point")) nil [3221 3326]) ("ecb-nav-get-pos" function (:parent "ecb-nav-history-item" :arguments ("item")) nil [3328 3403]) ("ecb-nav-get-window-start" function (:parent "ecb-nav-history-item" :arguments ("item")) nil [3405 3498]) ("ecb-nav-to-string" function (:parent "ecb-nav-history-item" :arguments ("item")) nil [3500 3664]) ("ecb-nav-save" function (:parent "ecb-nav-history-item" :arguments ("item")) nil [3754 3812]) ("ecb-nav-is-valid" function (:parent "ecb-nav-history-item" :arguments ("item")) nil [3814 3876]) ("ecb-nav-tag-history-item" type (:superclasses "ecb-nav-history-item" :members (("tag-buffer" variable (:default-value "nil") nil nil) ("tag-start" variable (:default-value "nil") nil nil) ("tag-end" variable (:default-value "nil") nil nil) ("tag-name" variable (:default-value "nil") nil nil) ("narrow" variable (:default-value "nil") nil nil)) :type "class") nil [4412 4831]) ("ecb-nav-tag-history-item-new" function (:arguments ("tag-name" "tag-buffer" "tag-start" "tag-end" "&optional" "narrow")) nil [4833 5259]) ("ecb-nav-get-tag-buffer" function (:parent "ecb-nav-tag-history-item" :arguments ("item")) nil [5261 5354]) ("ecb-nav-get-tag-start" function (:parent "ecb-nav-tag-history-item" :arguments ("item")) nil [5356 5447]) ("ecb-nav-get-tag-end" function (:parent "ecb-nav-tag-history-item" :arguments ("item")) nil [5449 5536]) ("ecb-nav-get-tag-name" function (:parent "ecb-nav-tag-history-item" :arguments ("item")) nil [5538 5627]) ("ecb-nav-get-narrow" function (:parent "ecb-nav-tag-history-item" :arguments ("item")) nil [5629 5714]) ("ecb-nav-goto" function (:parent "ecb-nav-tag-history-item" :arguments ("item")) nil [5716 6269]) ("ecb-nav-save" function (:parent "ecb-nav-tag-history-item" :arguments ("item")) nil [6271 6704]) ("ecb-nav-to-string" function (:parent "ecb-nav-tag-history-item" :arguments ("item")) nil [6706 6831]) ("ecb-nav-is-valid" function (:parent "ecb-nav-tag-history-item" :arguments ("item")) nil [6833 7197]) ("ecb-nav-file-history-item" type (:superclasses "ecb-nav-history-item" :members (("file" variable nil nil nil)) :type "class") nil [7316 7444]) ("ecb-nav-file-history-item-new" function nil nil [7446 7720]) ("ecb-nav-get-file" function (:parent "ecb-nav-file-history-item" :arguments ("item")) nil [7722 7804]) ("ecb-nav-set-file" function (:parent "ecb-nav-file-history-item" :arguments ("item" "file")) nil [7806 7898]) ("ecb-nav-save" function (:parent "ecb-nav-file-history-item" :arguments ("item")) nil [7900 8090]) ("ecb-nav-goto" function (:parent "ecb-nav-file-history-item" :arguments ("item")) nil [8092 8307]) ("ecb-nav-to-string" function (:parent "ecb-nav-file-history-item" :arguments ("item")) nil [8311 8433]) ("ecb-nav-is-valid" function (:parent "ecb-nav-file-history-item" :arguments ("item")) nil [8435 8502]) ("ecb-nav-first-node" variable nil nil [8619 8650]) ("setq" code nil nil [8651 8733]) ("ecb-nav-current-node" variable nil nil [8735 8768]) ("setq" code nil nil [8769 8815]) ("ecb-nav-initialize" function nil nil [8818 8989]) ("ecb-nav-jump-to-tag" function (:arguments ("file" "tag" "&optional" "narrow")) nil [8994 9152]) ("ecb-nav-jump-to-file" function (:arguments ("file")) nil [9154 9287]) ("ecb-nav-add-item" function (:arguments ("item")) nil [9289 9505]) ("ecb-nav-remove-current-node" function nil nil [9507 9590]) ("ecb-nav-remove-node" function (:arguments ("node")) nil [9592 10236]) ("ecb-nav-remove-invalid-nodes" function nil nil [10238 10518]) ("ecb-nav-save-current" function nil nil [10520 10652]) ("ecb-nav-goto-next" function (:user-visible-flag t) nil [10654 10808]) ("ecb-nav-goto-previous" function (:user-visible-flag t) nil [10810 10969]) ("ecb-nav-dump-history" function nil nil [10971 11105]) ("ecb-nav-dump-history--internal" function (:arguments ("node")) nil [11107 11281]) ("ecb-nav-goto--internal" function (:arguments ("node")) nil [11283 11707]) ("silentcomp-provide" code nil nil [11710 11744]))
    :file "ecb-navigate.el"
    :pointmax 11776
    )
   (semanticdb-table "ecb-eshell.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [3044 3065]) ("ecb-util" include nil nil [3068 3087]) ("ecb-compilation" include nil nil [3088 3114]) ("ecb-common-browser" include nil nil [3115 3144]) ("silentcomp-defvar" code nil nil [3146 3184]) ("silentcomp-defun" code nil nil [3185 3210]) ("silentcomp-defun" code nil nil [3211 3239]) ("silentcomp-defun" code nil nil [3240 3276]) ("silentcomp-defun" code nil nil [3277 3306]) ("defgroup" code nil nil [3308 3423]) ("ecb-eshell-enlarge-when-eshell" variable (:user-visible-flag t :default-value t) nil [3425 3628]) ("ecb-eshell-fit-window-to-command-output" variable (:user-visible-flag t :default-value t) nil [3630 3951]) ("ecb-eshell-auto-activate" variable (:user-visible-flag t) nil [3953 4202]) ("ecb-eshell-synchronize" variable (:user-visible-flag t :default-value t) nil [4204 4534]) ("ecb-eshell-pre-command-point" variable nil nil [4536 4641]) ("ecb-eshell-buffer-list" variable nil nil [4643 4829]) ("ecb-eshell-adviced-functions" variable (:constant-flag t :default-value (quote ((eshell . around)))) nil [4832 5265]) ("eshell" function (:arguments ("around" "ecb")) nil [5267 8651]) ("ecb-eshell-activate-integration" function nil nil [8659 8909]) ("ecb-eshell-deactivate-integration" function nil nil [8911 9394]) ("ecb-eshell-current-buffer-sync" function (:user-visible-flag t) nil [9396 11695]) ("ecb-eshell-save-buffer-history" function (:arguments ("&rest" "body")) nil [11697 12291]) ("ecb-eshell-recenter" function (:user-visible-flag t :arguments ("&optional" "display-errors")) nil [12293 12927]) ("ecb-eshell-precommand-hook" function nil nil [12929 13066]) ("ecb-eshell-fit-window-to-output" function nil nil [13069 15343]) ("ecb-eshell-auto-activate-hook" function nil nil [15346 15527]) ("ecb-eshell-window-size-change" function (:arguments ("frame")) nil [15529 15752]) ("add-hook" code nil nil [15754 15814]) ("silentcomp-provide" code nil nil [15816 15848]))
    :file "ecb-eshell.el"
    :pointmax 15878
    )
   (semanticdb-table "ecb-compilation.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [1656 1677]) ("silentcomp-defun" code nil nil [1680 1716]) ("ecb-util" include nil nil [1718 1737]) ("ecb-compilation-buffer-names" variable (:user-visible-flag t :default-value (\` (("*Calculator*") ("*vc*") ("*vc-diff*") (\, (if ecb-running-xemacs (quote ("\\*Apropos.*\\*" . t)) (quote ("*Apropos*")))) ("*Occur*") ("*shell*") ("\\*[cC]ompilation.*\\*" . t) ("\\*i?grep.*\\*" . t) ("*JDEE Compile Server*") (\, (if ecb-running-xemacs (quote ("\\*Help.*\\*" . t)) (quote ("*Help*")))) ("*Completions*") ("*Backtrace*") ("*Compile-log*") ("*bsh*") ((\, (if ecb-running-xemacs " *Message-Log*" "*Messages*")))))) nil [1739 3831]) ("ecb-compilation-buffer-names-internal" variable nil nil [3833 4085]) ("ecb-compilation-buffer-names" function nil nil [4087 4408]) ("ecb-compilation-registered-buffer-p" function (:arguments ("name")) nil [4410 4850]) ("ecb-compilation-major-modes" variable (:user-visible-flag t :default-value (quote (compilation-mode))) nil [4852 5337]) ("ecb-compilation-major-modes-internal" variable nil nil [5339 5534]) ("ecb-compilation-major-modes" function nil nil [5536 5844]) ("ecb-compilation-predicates" variable (:user-visible-flag t :default-value (quote (comint-check-proc))) nil [5847 6658]) ("ecb-compilation-predicates-internal" variable nil nil [6660 6843]) ("ecb-compilation-predicates" function nil nil [6845 7175]) ("ecb-compilation-get-buffers" function nil nil [7179 7859]) ("ecb-compilation-buffer-p" function (:arguments ("buffer-or-name")) nil [7862 10192]) ("ecb-compilation-update-menu-p" variable nil nil [10779 10821]) ("ecb-compilation-buffer-list-cache" variable nil nil [10822 10868]) ("ecb-compilation-update-idle-time" variable (:default-value 0.25) nil [10869 10915]) ("ecb-compilation-buffer-list-init" function nil nil [10917 11142]) ("ecb-compilation-buffer-list-changed-p" function nil nil [11144 11997]) ("ecb-compilation-update-menu" function nil nil [12002 13624]) ("silentcomp-provide" code nil nil [13634 13671]))
    :file "ecb-compilation.el"
    :pointmax 13706
    )
   (semanticdb-table "ecb-cycle.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [2291 2312]) ("ecb-compilation" include nil nil [2315 2341]) ("ecb-layout" include nil nil [2342 2363]) ("defgroup" code nil nil [2365 2476]) ("ecb-cycle-through-compilation-buffers" function (:user-visible-flag t :arguments ("&optional" "choose-buffer")) nil [2479 4969]) ("ecb-cycle-set-compilation-buffer" function (:arguments ("index" "compilation-buffers")) nil [4974 5219]) ("silentcomp-provide" code nil nil [5222 5253]))
    :file "ecb-cycle.el"
    :pointmax 5282
    )
   (semanticdb-table "ecb-face.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [1606 1627]) ("silentcomp-defun" code nil nil [1630 1664]) ("silentcomp-defun" code nil nil [1665 1698]) ("silentcomp-defun" code nil nil [1699 1727]) ("silentcomp-defun" code nil nil [1728 1766]) ("defgroup" code nil nil [1768 1870]) ("defgroup" code nil nil [1872 1990]) ("ecb-face-default" function (:arguments ("&optional" "height" "bold-p" "italic-p" "inherit" "fg-light-col" "fg-dark-col" "bg-light-col" "bg-dark-col" "fg-rest" "bg-rest" "reverse-video-p")) nil [1992 5067]) ("ecb-default-general-face" variable (:user-visible-flag t :default-value (ecb-face-default 1.0)) nil [5069 5946]) ("ecb-tree-guide-line-face" variable (:user-visible-flag t :default-value (ecb-face-default 1.0 nil nil (quote ecb-default-general-face) "grey" "gray")) nil [5948 6228]) ("ecb-tree-guide-line-face" variable (:user-visible-flag t :default-value (quote ecb-tree-guide-line-face)) nil [6230 6370]) ("ecb-directories-general-face" variable (:user-visible-flag t :default-value (ecb-face-default 1.0 nil nil (quote ecb-default-general-face))) nil [6372 6676]) ("ecb-directories-general-face" variable (:user-visible-flag t :default-value (quote ecb-default-general-face)) nil [6678 7363]) ("ecb-sources-general-face" variable (:user-visible-flag t :default-value (ecb-face-default 1.0 nil nil (quote ecb-default-general-face))) nil [7365 7657]) ("ecb-sources-general-face" variable (:user-visible-flag t :default-value (quote ecb-default-general-face)) nil [7659 8340]) ("ecb-methods-general-face" variable (:user-visible-flag t :default-value (ecb-face-default 1.0 nil nil (quote ecb-default-general-face))) nil [8342 8634]) ("ecb-methods-general-face" variable (:user-visible-flag t :default-value (quote ecb-default-general-face)) nil [8636 9303]) ("ecb-history-general-face" variable (:user-visible-flag t :default-value (ecb-face-default 1.0 nil nil (quote ecb-default-general-face))) nil [9305 9597]) ("ecb-history-general-face" variable (:user-visible-flag t :default-value (quote ecb-default-general-face)) nil [9599 10266]) ("ecb-default-highlight-face" variable (:user-visible-flag t :default-value (ecb-face-default nil nil nil nil "yellow" nil "cornflower blue" "magenta" nil nil t)) nil [10268 11366]) ("ecb-directory-face" variable (:user-visible-flag t :default-value (ecb-face-default nil nil nil (quote ecb-default-highlight-face) "yellow" nil "cornflower blue" "magenta" nil nil t)) nil [11368 11784]) ("ecb-directory-face" variable (:user-visible-flag t :default-value (quote ecb-default-highlight-face)) nil [11786 12412]) ("ecb-source-face" variable (:user-visible-flag t :default-value (ecb-face-default nil nil nil (quote ecb-default-highlight-face) "yellow" nil "cornflower blue" "magenta" nil nil t)) nil [12414 12818]) ("ecb-source-face" variable (:user-visible-flag t :default-value (quote ecb-default-highlight-face)) nil [12820 13430]) ("ecb-method-face" variable (:user-visible-flag t :default-value (ecb-face-default nil nil nil (quote ecb-default-highlight-face) "yellow" nil "cornflower blue" "magenta" nil nil t)) nil [13432 13833]) ("ecb-method-face" variable (:user-visible-flag t :default-value (quote ecb-default-highlight-face)) nil [13835 14441]) ("ecb-method-non-semantic-face" variable (:user-visible-flag t :default-value (ecb-face-default nil nil nil (quote ecb-methods-general-face) "brown" "brown")) nil [14443 14753]) ("ecb-method-non-semantic-face" variable (:user-visible-flag t :default-value (quote speedbar-tag-face)) nil [14755 15247]) ("ecb-history-face" variable (:user-visible-flag t :default-value (ecb-face-default nil nil nil (quote ecb-default-highlight-face) "yellow" nil "cornflower blue" "magenta" nil nil t)) nil [15249 15657]) ("ecb-history-face" variable (:user-visible-flag t :default-value (quote ecb-default-highlight-face)) nil [15659 16269]) ("ecb-analyse-face" variable (:user-visible-flag t :default-value (ecb-face-default nil nil nil (quote ecb-default-highlight-face) "yellow" nil "cornflower blue" "magenta" nil nil t)) nil [16271 16679]) ("ecb-analyse-face" variable (:user-visible-flag t :default-value (quote ecb-default-highlight-face)) nil [16681 17291]) ("ecb-analyse-general-face" variable (:user-visible-flag t :default-value (ecb-face-default 1.0 nil nil (quote ecb-default-general-face))) nil [17293 17585]) ("ecb-analyse-general-face" variable (:user-visible-flag t :default-value (quote ecb-default-general-face)) nil [17587 18254]) ("ecb-analyse-bucket-element-face" variable (:user-visible-flag t :default-value (ecb-face-default nil nil nil (quote ecb-default-general-face) "brown")) nil [18256 18926]) ("ecb-analyse-bucket-element-face" variable (:user-visible-flag t :default-value (quote ecb-analyse-bucket-element-face)) nil [18928 19547]) ("ecb-analyse-bucket-node-face" variable (:user-visible-flag t :default-value (ecb-face-default nil t nil (quote ecb-default-general-face))) nil [19549 20141]) ("ecb-analyse-bucket-node-face" variable (:user-visible-flag t :default-value (quote ecb-analyse-bucket-node-face)) nil [20143 20731]) ("ecb-tag-header-face" variable (:user-visible-flag t :default-value (ecb-face-default nil nil nil nil nil nil "SeaGreen1" "SeaGreen1" nil nil t)) nil [20733 21140]) ("ecb-tag-header-face" variable (:user-visible-flag t :default-value (quote ecb-tag-header-face)) nil [21144 21439]) ("ecb-source-in-directories-buffer-face" variable (:user-visible-flag t :default-value (ecb-face-default nil nil nil (quote ecb-default-general-face) "medium blue" "LightBlue1" nil nil nil "gray")) nil [21441 22005]) ("ecb-source-in-directories-buffer-face" variable (:user-visible-flag t :default-value (quote ecb-source-in-directories-buffer-face)) nil [22008 22219]) ("ecb-source-read-only-face" variable (:user-visible-flag t :default-value (ecb-face-default nil nil t)) nil [22221 22358]) ("ecb-source-read-only-face" variable (:user-visible-flag t :default-value (quote ecb-source-read-only-face)) nil [22361 22549]) ("ecb-directory-not-accessible-face" variable (:user-visible-flag t :default-value (ecb-face-default nil nil nil (quote ecb-default-general-face) "gray60" "gray60" nil nil nil "gray60")) nil [22551 23096]) ("ecb-directory-not-accessible-face" variable (:user-visible-flag t :default-value (quote ecb-directory-not-accessible-face)) nil [23099 23309]) ("ecb-type-tag-class-face" variable (:user-visible-flag t :default-value (ecb-face-default nil t)) nil [23311 23447]) ("ecb-type-tag-interface-face" variable (:user-visible-flag t :default-value (ecb-face-default nil t)) nil [23449 23589]) ("ecb-type-tag-struct-face" variable (:user-visible-flag t :default-value (ecb-face-default nil t)) nil [23591 23728]) ("ecb-type-tag-typedef-face" variable (:user-visible-flag t :default-value (ecb-face-default nil t)) nil [23730 23868]) ("ecb-type-tag-union-face" variable (:user-visible-flag t :default-value (ecb-face-default nil t)) nil [23870 24006]) ("ecb-type-tag-enum-face" variable (:user-visible-flag t :default-value (ecb-face-default nil t)) nil [24008 24143]) ("ecb-type-tag-group-face" variable (:user-visible-flag t :default-value (ecb-face-default nil t nil nil (if ecb-running-xemacs "dimgray" "dim gray") (if ecb-running-xemacs "dimgray" "dim gray"))) nil [24145 24697]) ("ecb-bucket-node-face" variable (:user-visible-flag t :default-value (ecb-face-default nil t nil (quote ecb-default-general-face))) nil [24699 25292]) ("when" code nil nil [25865 26049]) ("ecb-mode-line-win-nr-face" variable (:user-visible-flag t :default-value (ecb-face-default nil t)) nil [26050 26230]) ("ecb-mode-line-win-nr-face" variable (:user-visible-flag t :default-value (quote ecb-mode-line-win-nr-face)) nil [26232 26544]) ("when" code nil nil [26546 26749]) ("ecb-mode-line-prefix-face" variable (:user-visible-flag t :default-value (ecb-face-default nil nil nil nil "forestgreen" "forestgreen")) nil [26803 27107]) ("ecb-mode-line-prefix-face" variable (:user-visible-flag t :default-value (quote ecb-mode-line-prefix-face)) nil [27109 27401]) ("when" code nil nil [27403 27537]) ("ecb-mode-line-data-face" variable (:user-visible-flag t :default-value (ecb-face-default)) nil [27538 27684]) ("ecb-mode-line-data-face" variable (:user-visible-flag t :default-value (quote ecb-mode-line-data-face)) nil [27686 27968]) ("silentcomp-provide" code nil nil [27972 28002]))
    :file "ecb-face.el"
    :pointmax 28030
    )
   (semanticdb-table "ecb-tod.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [1552 1573]) ("ecb-util" include nil nil [1576 1595]) ("silentcomp-defvar" code nil nil [1597 1631]) ("ecb-tip-of-the-day" variable (:user-visible-flag t :default-value t) nil [1633 1751]) ("ecb-tip-of-the-day-file" variable (:user-visible-flag t :default-value "~/.ecb-tip-of-day.el") nil [1753 1896]) ("ecb-tod-tip-list" variable (:constant-flag t :default-value (quote ("You can expand the ECB-methods-buffer with `ecb-expand-methods-nodes' [C-c . x]." "You can toggle between different layouts with `ecb-toggle-layout' [C-c . t]." "You can go back to the most recent layout with [C-u] `ecb-toggle-layout' [C-u C-c . t]." "You can toggle displaying the ECB-windows with `ecb-toggle-ecb-windows' [C-c . w]." "You can show and hide the ECB-windows on a major-mode-basis with `ecb-major-modes-show-or-hide'." "You can maximize a certain ECB-window either via its popup-menu or with [C-x 1] in that window." "You can use speedbar instead of the native tree-buffers with option `ecb-use-speedbar-instead-native-tree-buffer'." "You can speedup access for big directories with option `ecb-cache-directory-contents'." "You can display the online help also in HTML-format with option `ecb-show-help-format'." "You can interactively create your own layouts with the command `ecb-create-new-layout'." "You can start the eshell in the compile-window simply with `eshell' or [C-c . e]." "Use the incremental search in the methods-buffer for fast node-selecting; see `ecb-tree-incremental-search'." "You can cycle through all currently opened \"compile-buffers\" with `ecb-cycle-through-compilation-buffers'." "You can change the window-sizes by dragging the mouse and storing the new sizes with `ecb-store-window-sizes'." "You can get a quick overlook of all built-in layouts with `ecb-show-layout-help'." "Browse your sources as with a web-browser with `ecb-nav-goto-next' [C-c . n], `ecb-nav-goto-previous' [C-c . p]." "Download latest ECB direct from the website with `ecb-download-ecb'." "Download latest semantic direct from the website with `ecb-download-semantic''." "Customize the look&feel of the tree-buffers with `ecb-tree-expand-symbol-before' and `ecb-tree-indent'." "Customize the contents of the methods-buffer with `ecb-tag-display-function', `ecb-type-tag-display', `ecb-show-tags'." "Customize the main mouse-buttons of the tree-buffers with `ecb-primary-secondary-mouse-buttons'." "Customize with `ecb-tree-do-not-leave-window-after-select' for which tree-buffers a selection doesn't leave the window." "Grep a directory (recursive) by using the popup-menu (the right mouse-button) in the directories buffer." "Customize the sorting of the sources with the option `ecb-sources-sort-method'." "Narrow the source-buffer to the selected tag in the methods-buffer with `ecb-tag-visit-post-actions'." "Enable autom. enlarging of the compile-window by select with the option `ecb-compile-window-temporally-enlarge'." "Customize with `ecb-compile-window-temporally-enlarge' the situations the compile-window is allowed to enlarge." "Customize the meaning of `other-window' [C-x o] with the option `ecb-other-window-behavior'." "Customize height and width of the ECB-windows with `ecb-windows-height' and `ecb-windows-width'." "Define with `ecb-compilation-buffer-names' and `ecb-compilation-major-modes' which buffers are \"compile-buffers\"." "Customize all faces used by ECB with the customize-groups `ecb-face-options' and `ecb-faces'." "Auto-activate eshell with the option `ecb-eshell-auto-activate'." "Get best use of big screen-displays with leftright-layouts like \"leftright1\" or \"leftright2\"." "Use the POWER-click in the methods-buffer to narrow the clicked node in the edit-window." "Use the POWER-click in the sources- and history-buffer to get only an overlook of the source-contents." "Exclude not important sources from being displayed in the sources-buffer with `ecb-source-file-regexps'." "Use left- and right-arrow for smart expanding/collapsing tree-buffer-nodes; see `ecb-tree-navigation-by-arrow'." "Add personal key-bindings to the tree-buffers with `ecb-common-tree-buffer-after-create-hook'." "Add personal key-bindings to the directories-buffer with `ecb-directories-buffer-after-create-hook'." "Add personal key-bindings to the sources-buffer with `ecb-sources-buffer-after-create-hook'." "Add personal key-bindings to the methods-buffer with `ecb-methods-buffer-after-create-hook'." "Add personal key-bindings to the history-buffer with `ecb-history-buffer-after-create-hook'." "Pop up a menu with the right mouse-button and do senseful things in the tree-buffers." "Extend the builtin popup-menus to your needs - see `ecb-directories-menu-user-extension'." "Call `ecb-show-help' [C-c . o] with a prefix-argument [C-u] and choose the help-format." "You can change the prefix [C-c .] of all ECB-key-bindings quick and easy with `ecb-key-map'." "Send a problem-report to the ECB-mailing-list quick and easy with `ecb-submit-problem-report'." "Switch on/off auto. expanding of the ECB-methods-buffer with `ecb-auto-expand-directory-tree'." "You can quickly toggle auto. expanding of the ECB-methods-buffer with `ecb-toggle-auto-expand-tag-tree'." "Highlight current semantic-tag of the edit-buffer in the ECB-methods-buffer with `ecb-highlight-tag-with-point'." "Apply a filter to the sources-buffer either via `ecb-sources-filter' or via the popup-menu." "Apply a filter to the history-buffer either via `ecb-history-filter' or via the popup-menu." "Apply tag-filters (can be layered) to the methods-buffer either via `ecb-methods-filter' or via the popup-menu." "Use `scroll-all-mode' to scroll both edit-windows of ECB simultaneously - and no other windows are scrolled!" "You can toggle having a compile window with `ecb-toggle-compile-window' if `ecb-compile-window-height' is not nil." "Start ECB automatically after Emacs is started. Use option `ecb-auto-activate'" "Maximize a tree-buffer via modeline - ECB supports the standard-mechanism of (X)Emacs for deleting other windows." "Easy horizontal scrolling the tree-buffers with the mouse with [M-mouse-1] and [M-mouse-3]; see `ecb-tree-easy-hor-scroll'." "Expand and collapse very precisely the current node in a tree-buffer with commands in the popup-menu." "Let ECB display the version-control-state of your files in the tree-buffers. See `ecb-vc-enable-support'." "Work with remote paths (e.g. TRAMP-, ANGE-FTP-, or EFS-paths) as with local paths in `ecb-source-path'." "Exclude certain files from being displayed in the history-buffer. See `ecb-history-exclude-file-regexps'." "Get the most important options of ECB at a glance by viewing the customization group \"ecb-most-important\"."))) nil [1898 8543]) ("ecb-show-tip-of-the-day" function (:user-visible-flag t) nil [8548 9118]) ("ecb-tod-move-cursor" function (:arguments ("cursor")) nil [9120 9440]) ("silentcomp-provide" code nil nil [9442 9471]))
    :file "ecb-tod.el"
    :pointmax 9496
    )
   (semanticdb-table "ecb-speedbar.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [2477 2498]) ("speedbar" include nil nil [2501 2520]) ("ecb-util" include nil nil [2521 2540]) ("ecb-semantic-wrapper" include nil nil [2541 2572]) ("ecb-common-browser" include nil nil [2573 2602]) ("cl" include nil nil [2654 2667]) ("silentcomp-defvar" code nil nil [2680 2718]) ("silentcomp-defvar" code nil nil [2719 2757]) ("silentcomp-defun" code nil nil [2768 2799]) ("silentcomp-defvar" code nil nil [2800 2840]) ("defgroup" code nil nil [2842 2958]) ("ecb-speedbar-before-activate-hook" variable (:user-visible-flag t) nil [2960 3320]) ("ecb-speedbar-adviced-functions" variable (:constant-flag t :default-value (quote ((speedbar-click . around) (speedbar-frame-mode . around) (dframe-select-attached-frame . after) (speedbar-get-focus . around) (dframe-mouse-set-point . around)))) nil [3322 4129]) ("ecb-speedbar-buffer-name" variable (:constant-flag t :default-value " SPEEDBAR") nil [4131 4215]) ("ecb-speedbar-buffer-selected" function nil nil [4217 4321]) ("speedbar-click" function (:arguments ("around" "ecb")) nil [4323 5474]) ("speedbar-frame-mode" function (:arguments ("around" "ecb")) nil [5477 5740]) ("speedbar-get-focus" function (:arguments ("around" "ecb")) nil [5743 6223]) ("dframe-mouse-set-point" function (:arguments ("around" "ecb")) nil [6435 7148]) ("dframe-select-attached-frame" function (:arguments ("after" "ecb")) nil [7447 7734]) ("ecb-speedbar-dframe-select-attached-window" function nil nil [7736 8137]) ("ecb-speedbar-select-speedbar-window" function nil nil [8139 8344]) ("ecb-speedbar-set-buffer" function nil nil [8346 8639]) ("ecb-speedbar-verbosity-level-old" variable nil nil [8642 8687]) ("ecb-speedbar-select-frame-method-old" variable nil nil [8688 8737]) ("ecb-speedbar-activate" function nil nil [8739 11769]) ("ecb-speedbar-deactivate" function nil nil [11772 12709]) ("ecb-speedbar-active-p" function nil nil [12713 12942]) ("ecb-speedbar-update-contents" function nil nil [12944 13051]) ("ecb-speedbar-current-buffer-sync" function (:user-visible-flag t) nil [13053 14160]) ("ecb-goto-window-speedbar" function (:user-visible-flag t) nil [14162 14396]) ("ecb-maximize-window-speedbar" function (:user-visible-flag t) nil [14398 14744]) ("ecb-speedbar-sb-tag-p" function (:arguments ("tag")) nil [14917 15085]) ("tree-buffer" include nil nil [15087 15109]) ("ecb-face" include nil nil [15110 15129]) ("ecb-create-non-semantic-tree" function (:arguments ("node" "tag-list")) nil [15130 18579]) ("ecb-get-tags-for-non-semantic-files" function nil nil [18581 20355]) ("silentcomp-provide" code nil nil [20358 20392]))
    :file "ecb-speedbar.el"
    :pointmax 20424
    )
   (semanticdb-table "ecb-autogen.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("autoload" include nil nil [1653 1672]) ("ecb-util" include nil nil [1674 1693]) ("silentcomp" include nil nil [1716 1737]) ("when" code nil nil [1741 2039]) ("ecb-autogen-header" variable (:constant-flag t :default-value "Auto-generated ecb autoloads") nil [2042 2153]) ("ecb-autogen-file" variable (:constant-flag t :default-value "ecb-autoloads.el") nil [2155 2248]) ("ecb-autoload-feature" variable (:constant-flag t :default-value "ecb-autoloads") nil [2250 2331]) ("ecb-autogen-subdirs" variable nil nil [2333 2408]) ("ecb-autogen-update-header" function nil nil [2410 3247]) ("ecb-batch-update-autoloads" function nil nil [3389 4020]) ("ecb-update-autoloads" function (:user-visible-flag t) nil [4023 5958]) ("silentcomp-provide" code nil nil [5960 5993]))
    :file "ecb-autogen.el"
    :pointmax 6024
    )
   (semanticdb-table "ecb-winman-support.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [4056 4077]) ("ecb-util" include nil nil [4080 4099]) ("silentcomp-defvar" code nil nil [4101 4150]) ("defgroup" code nil nil [4153 4322]) ("ecb-winman-escreen-number" variable (:user-visible-flag t :default-value 1) nil [4324 4644]) ("ecb-winman-winring-name" variable (:user-visible-flag t :default-value "ECB") nil [4646 5012]) ("ecb-winman-escreen-adviced-functions" variable (:constant-flag t :default-value (quote ((escreen-save-current-screen-configuration . before)))) nil [5094 5574]) ("ecb-winman-escreen-enable-support" function (:user-visible-flag t) nil [5577 6406]) ("ecb-winman-escreen-disable-support" function (:user-visible-flag t) nil [6409 6699]) ("ecb-winman-escreen-goto-escreen-hook" function nil nil [6706 7077]) ("escreen-save-current-screen-configuration" function (:arguments ("before" "ecb")) nil [7079 7583]) ("ecb-winman-winring-adviced-functions" variable (:constant-flag t :default-value (quote ((winring-save-current-configuration . before) (winring-initialize . after) (winring-duplicate-configuration . before) (winring-restore-configuration . before) (winring-set-name . after)))) nil [7664 8296]) ("ecb-winman-winring-enable-support" function (:user-visible-flag t) nil [8298 9021]) ("ecb-winman-winring-disable-support" function (:user-visible-flag t) nil [9023 9185]) ("ecb-winman-winring-ecb-frame" variable nil nil [9188 9298]) ("winring-set-name" function (:arguments ("after" "ecb")) nil [9300 10147]) ("winring-duplicate-configuration" function (:arguments ("before" "ecb")) nil [10149 10412]) ("winring-restore-configuration" function (:arguments ("before" "ecb")) nil [10414 10766]) ("winring-save-current-configuration" function (:arguments ("before" "ecb")) nil [10771 11268]) ("winring-initialize" function (:arguments ("after" "ecb")) nil [11273 11610]) ("ecb-winman-not-supported-function-advices" variable (:constant-flag t :default-value (if ecb-running-xemacs (quote ((winner-mode . before) (winner-redo . before) (winner-undo . before) (push-window-configuration . before) (pop-window-configuration . before) (unpop-window-configuration . before))) (quote ((winner-mode . before) (winner-redo . before) (winner-undo . before))))) nil [11693 12088]) ("winner-mode" function (:arguments ("before" "ecb")) nil [12090 12305]) ("winner-redo" function (:arguments ("before" "ecb")) nil [12307 12520]) ("winner-undo" function (:arguments ("before" "ecb")) nil [12522 12735]) ("when" code nil nil [12737 13429]) ("ecb-disable-advices" code nil nil [13471 13529]) ("ecb-disable-advices" code nil nil [13530 13588]) ("ecb-disable-advices" code nil nil [13589 13652]) ("silentcomp-provide" code nil nil [13654 13694]))
    :file "ecb-winman-support.el"
    :pointmax 13732
    )
   (semanticdb-table "ecb-compatibility.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("silentcomp" include nil nil [1649 1670]) ("ecb-util" include nil nil [1674 1693]) ("ecb-layout" include nil nil [1694 1715]) ("ecb-compatibility-advices" variable (:default-value (quote ((bs-show . before) (Electric-pop-up-window . around) (electric-command-history . before) (electric-buffer-list . before) (electric-buffer-list . after)))) nil [2055 2447]) ("bs-show" function (:arguments ("before" "ecb")) nil [2449 3133]) ("Electric-pop-up-window" function (:arguments ("around" "ecb")) nil [3135 3991]) ("electric-command-history" function (:arguments ("before" "ecb")) nil [3993 4263]) ("electric-buffer-list" function (:arguments ("before" "ecb")) nil [4265 4531]) ("electric-buffer-list" function (:arguments ("after" "ecb")) nil [4533 4723]) ("ecb-disable-advices" code nil nil [4764 4811]) ("silentcomp-provide" code nil nil [4813 4852]))
    :file "ecb-compatibility.el"
    :pointmax 4889
    )
   (semanticdb-table "ecb-analyse.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("semantic-analyze" include nil nil [1164 1191]) ("ecb-layout" include nil nil [1192 1213]) ("ecb-common-browser" include nil nil [1214 1243]) ("ecb-method-browser" include nil nil [1244 1273]) ("silentcomp" include nil nil [1296 1317]) ("cl" include nil nil [1370 1383]) ("defgroup" code nil nil [1387 1507]) ("ecb-analyse-buffer-name" variable (:user-visible-flag t :default-value " *ECB Analyse*") nil [1510 2006]) ("ecb-analyse-buffer-after-create-hook" variable (:user-visible-flag t) nil [2008 2439]) ("ecb-analyse-show-node-info" variable (:user-visible-flag t :default-value (quote (if-too-long . name))) nil [2441 3493]) ("ecb-analyse-collapsed-buckets" variable (:user-visible-flag t) nil [3496 5816]) ("ecb-analyse-fontified-buckets" variable (:user-visible-flag t :default-value (quote ("Context"))) nil [5818 7319]) ("ecb-analyse-gen-tag-info-fn" variable (:user-visible-flag t) nil [7321 7995]) ("ecb-analyse-show-tag-info-fn" variable (:user-visible-flag t :default-value (quote message)) nil [7997 8966]) ("ecb-analyse-nodedata-tag-with-pos" variable (:constant-flag t) nil [9808 9854]) ("ecb-analyse-nodedata-tag-without-pos" variable (:constant-flag t :default-value 1) nil [9855 9904]) ("ecb-analyse-nodedata-no-tag" variable (:constant-flag t :default-value 2) nil [9905 9945]) ("ecb-analyse-nodetype-bucket" variable (:constant-flag t) nil [9947 9987]) ("ecb-analyse-nodetype-context" variable (:constant-flag t :default-value 1) nil [9988 10029]) ("ecb-analyse-nodetype-arguments" variable (:constant-flag t :default-value 2) nil [10030 10073]) ("ecb-analyse-nodetype-completions" variable (:constant-flag t :default-value 3) nil [10074 10119]) ("ecb-analyse-nodetype-localvars" variable (:constant-flag t :default-value 4) nil [10120 10163]) ("ecb-analyse-nodetype-prefix" variable (:constant-flag t :default-value 5) nil [10164 10204]) ("ecb-analyse-nodetype-assignee" variable (:constant-flag t :default-value 6) nil [10205 10247]) ("ecb-analyse-nodetype-function" variable (:constant-flag t :default-value 7) nil [10248 10290]) ("ecb-analyse-nodetype-function-arg" variable (:constant-flag t :default-value 8) nil [10291 10337]) ("ecb-analyse-buffer-sync" function (:user-visible-flag t) nil [10339 12007]) ("ecb-analyse-more-nodes" function (:parent "semantic-analyze-context" :arguments ("context")) nil [12009 12480]) ("ecb-analyse-more-nodes" function (:parent "semantic-analyze-context-assignment" :arguments ("context")) nil [12482 12819]) ("ecb-analyse-more-nodes" function (:parent "semantic-analyze-context-functionarg" :arguments ("context")) nil [12821 13450]) ("ecb-analyse-add-nodes" function (:arguments ("bucket" "bucket-name" "list" "nodetype")) nil [13811 16245]) ("ecb-analyse-compare-node-data" function (:arguments ("left" "right")) nil [16247 16474]) ("tree-buffer-defpopup-command" code nil nil [16476 17607]) ("tree-buffer-defpopup-command" code nil nil [17609 18545]) ("ecb-analyse-node-clicked" function (:arguments ("node" "ecb-button" "edit-window-nr" "shift-mode" "meta-mode")) nil [18547 19855]) ("defecb-window-dedicator" code nil nil [19857 20127]) ("ecb-maximize-window-analyse" function (:user-visible-flag t) nil [20129 20470]) ("ecb-goto-window-analyse" function (:user-visible-flag t) nil [20472 20622]) ("ecb-analyse-show-tag-info-in-temp-buffer" function (:arguments ("info-string")) nil [20624 20986]) ("ecb-analyse-gen-tag-info" function (:arguments ("tag")) nil [21125 22617]) ("tree-buffer-defpopup-command" code nil nil [22620 23096]) ("ecb-mouse-over-analyse-node" function (:arguments ("node" "&optional" "window" "no-message" "click-force")) nil [23098 23996]) ("ecb-analyse-node-mouse-highlighted-p" function (:arguments ("node")) nil [23998 24374]) ("ecb-analyse-create-menu" function (:arguments ("node")) nil [24376 25025]) ("ecb-analyse-menu-creator" function (:arguments ("tree-buffer-name" "node")) nil [25031 25793]) ("ecb-analyse-gen-menu-title-creator" function nil nil [25796 26472]) ("defecb-tree-buffer-creator" code nil nil [26475 28788]) ("silentcomp-provide" code nil nil [28792 28825]))
    :file "ecb-analyse.el"
    :pointmax 28856
    )
   (semanticdb-table "ecb-symboldef.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("ecb-util" include nil nil [1685 1704]) ("ecb-layout" include nil nil [1705 1726]) ("ecb-common-browser" include nil nil [1727 1756]) ("ecb-semantic-wrapper" include nil nil [1757 1788]) ("silentcomp" include nil nil [1811 1832]) ("silentcomp-defun" code nil nil [1851 1886]) ("silentcomp-defun" code nil nil [1887 1928]) ("silentcomp-defun" code nil nil [1929 1965]) ("silentcomp-defun" code nil nil [1981 2017]) ("defgroup" code nil nil [2183 2315]) ("ecb-symboldef-buffer-name" variable (:user-visible-flag t :default-value " *ECB Symboldefinition*") nil [2317 2855]) ("ecb-symboldef-find-functions" variable (:user-visible-flag t :default-value (quote ((lisp-interaction-mode . ecb-symboldef-find-lisp-doc) (lisp-mode . ecb-symboldef-find-lisp-doc) (emacs-lisp-mode . ecb-symboldef-find-lisp-doc) (default . ecb-symboldef-find-definition)))) nil [2857 4749]) ("ecb-symboldef-find-backends" variable (:user-visible-flag t :default-value (quote (semanticdb etags))) nil [4968 5355]) ("ecb-symboldef-last-symbol" variable nil nil [5397 5478]) ("ecb-symboldef-get-find-function" function nil nil [5480 5823]) ("ecb-symboldef-find-null" function (:arguments ("symbol-name" "edit-buffer")) nil [5825 6321]) ("ecb-symboldef-get-elisp-arglist" function (:arguments ("function")) nil [6323 8007]) ("ecb-symboldef-find-lisp-doc" function (:arguments ("symbol-name" "edit-buffer")) nil [8009 10423]) ("ecb-symboldef-find-tag-by-semanticdb" function (:arguments ("symbol-name" "edit-buffer")) nil [10521 11404]) ("ecb-symboldef-find-tag-by-etags" function (:arguments ("symbol-name" "edit-buffer")) nil [11406 12096]) ("ecb-symboldef-find-definition" function (:arguments ("symbol-name" "edit-buffer")) nil [12098 13941]) ("ecb-symboldef-update" function (:arguments ("edit-buffer" "symboldef-buffer" "symboldef-window")) nil [13970 16048]) ("defecb-window-dedicator" code nil nil [16050 16412]) ("ecb-symboldef-sync" function (:user-visible-flag t) nil [16414 16843]) ("ecb-maximize-window-symboldef" function (:user-visible-flag t) nil [16845 17208]) ("ecb-goto-window-symboldef" function (:user-visible-flag t) nil [17210 17374]) ("silentcomp-provide" code nil nil [17376 17411]))
    :file "ecb-symboldef.el"
    :pointmax 17444
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre3"
  :semanticdb-version "2.0pre3"
  )
